//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Dzaba.TeamCityClient.Model
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITeamCityClient
    {
        /// <summary>
        /// Get root endpoints.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetRootEndpointsOfRootAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get root endpoints.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetRootEndpointsOfRootAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all agent pools.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPools> GetAllAgentPoolsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all agent pools.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPools> GetAllAgentPoolsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> CreateAgentPoolAsync(AgentPool body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> CreateAgentPoolAsync(AgentPool body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the agent pool matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> GetAgentPoolOfAgentPoolAsync(string agentPoolLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the agent pool matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> GetAgentPoolOfAgentPoolAsync(string agentPoolLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete the agent pool matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAgentPoolAsync(string agentPoolLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the agent pool matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAgentPoolAsync(string agentPoolLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the agent of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agents> GetAllAgentsFromAgentPoolAsync(string agentPoolLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the agent of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agents> GetAllAgentsFromAgentPoolAsync(string agentPoolLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign the agent to the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agent> AddAgentToAgentPoolAsync(string agentPoolLocator, Agent body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign the agent to the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agent> AddAgentToAgentPoolAsync(string agentPoolLocator, Agent body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all projects of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetAllProjectsFromAgentPoolAsync(string agentPoolLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all projects of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetAllProjectsFromAgentPoolAsync(string agentPoolLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign the project to the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> AddProjectToAgentPoolAsync(string agentPoolLocator, Project body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign the project to the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> AddProjectToAgentPoolAsync(string agentPoolLocator, Project body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update projects of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> SetAgentPoolProjectsAsync(string agentPoolLocator, Projects body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update projects of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> SetAgentPoolProjectsAsync(string agentPoolLocator, Projects body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unassign all projects from the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllProjectsFromAgentPoolAsync(string agentPoolLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign all projects from the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllProjectsFromAgentPoolAsync(string agentPoolLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unassign the project from the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectFromAgentPoolAsync(string agentPoolLocator, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign the project from the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectFromAgentPoolAsync(string agentPoolLocator, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetFieldFromAgentPoolAsync(string agentPoolLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetFieldFromAgentPoolAsync(string agentPoolLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a field of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetAgentPoolFieldAsync(string agentPoolLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a field of the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetAgentPoolFieldAsync(string agentPoolLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get agent type matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentType> GetAgentTypeAsync(string agentTypeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get agent type matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentType> GetAgentTypeAsync(string agentTypeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all known agents.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agents> GetAllAgentsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all known agents.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agents> GetAllAgentsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get agent matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agent> GetAgentAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get agent matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agent> GetAgentAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an inactive agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAgentAsync(string agentLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inactive agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAgentAsync(string agentLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the authorization info of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizedInfo> GetAuthorizedInfoAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the authorization info of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizedInfo> GetAuthorizedInfoAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the authorization info of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizedInfo> SetAuthorizedInfoAsync(string agentLocator, AuthorizedInfo body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the authorization info of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizedInfo> SetAuthorizedInfoAsync(string agentLocator, AuthorizedInfo body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the build configuration run policy of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibilityPolicy> GetBuildConfigurationRunPolicyAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the build configuration run policy of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibilityPolicy> GetBuildConfigurationRunPolicyAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build configuration run policy of agent matching locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibilityPolicy> SetBuildConfigurationRunPolicyAsync(string agentLocator, CompatibilityPolicy body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build configuration run policy of agent matching locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibilityPolicy> SetBuildConfigurationRunPolicyAsync(string agentLocator, CompatibilityPolicy body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build types compatible with the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetCompatibleBuildTypesAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build types compatible with the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetCompatibleBuildTypesAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check if the matching agent is enabled.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledInfo> GetEnabledInfoAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if the matching agent is enabled.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledInfo> GetEnabledInfoAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the enablement status of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledInfo> SetEnabledInfoAsync(string agentLocator, EnabledInfo body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the enablement status of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledInfo> SetEnabledInfoAsync(string agentLocator, EnabledInfo body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build types incompatible with the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Compatibilities> GetIncompatibleBuildTypesAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build types incompatible with the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Compatibilities> GetIncompatibleBuildTypesAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the agent pool of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> GetAgentPoolAsync(string agentLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the agent pool of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> GetAgentPoolAsync(string agentLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign the matching agent to the specified agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> SetAgentPoolAsync(string agentLocator, AgentPool body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign the matching agent to the specified agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> SetAgentPoolAsync(string agentLocator, AgentPool body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAgentFieldAsync(string agentLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAgentFieldAsync(string agentLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a field of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetAgentFieldAsync(string agentLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a field of the matching agent.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetAgentFieldAsync(string agentLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the API version.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetApiVersionAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the API version.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetApiVersionAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all audit events.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuditEvents> GetAllAuditEventsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all audit events.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuditEvents> GetAllAuditEventsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get audit event matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuditEvent> GetAuditEventAsync(string auditEventLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get audit event matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuditEvent> GetAuditEventAsync(string auditEventLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a users avatar
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutAvatarAsync(FileParameter avatar, string userLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a users avatar
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutAvatarAsync(FileParameter avatar, string userLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a users avatar
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAvatarAsync(string userLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a users avatar
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAvatarAsync(string userLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a users avatar
        /// </summary>
        /// <param name="size">avatar's size</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAvatarAsync(string userLocator, int size);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a users avatar
        /// </summary>
        /// <param name="size">avatar's size</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAvatarAsync(string userLocator, int size, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a users avatar
        /// </summary>
        /// <param name="size">avatar's size</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAvatarWithHashAsync(string userLocator, int size, string hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a users avatar
        /// </summary>
        /// <param name="size">avatar's size</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAvatarWithHashAsync(string userLocator, int size, string hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all queued builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetAllQueuedBuildsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all queued builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetAllQueuedBuildsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a new build to the queue.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> AddBuildToQueueAsync(Build body, bool? moveToTop);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new build to the queue.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> AddBuildToQueueAsync(Build body, bool? moveToTop, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete all queued builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllQueuedBuildsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all queued builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllQueuedBuildsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the build queue order.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> SetQueuedBuildsOrderAsync(Builds body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the build queue order.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> SetQueuedBuildsOrderAsync(Builds body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the queue position of a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> GetQueuedBuildPositionAsync(string queuePosition, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the queue position of a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> GetQueuedBuildPositionAsync(string queuePosition, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the queue position of a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> SetQueuedBuildPositionAsync(Build body, string queuePosition, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the queue position of a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> SetQueuedBuildPositionAsync(Build body, string queuePosition, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get approval info of a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovalInfo> GetApprovalInfoAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get approval info of a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovalInfo> GetApprovalInfoAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve queued build with approval feature enabled.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovalInfo> ApproveQueuedBuildAsync(string buildLocator, string body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve queued build with approval feature enabled.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovalInfo> ApproveQueuedBuildAsync(string buildLocator, string body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get tags of the queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> GetQueuedBuildTagsAsync(string buildLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tags of the queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> GetQueuedBuildTagsAsync(string buildLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add tags to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddTagsToBuildOfBuildQueueAsync(string buildLocator, Tags body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add tags to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddTagsToBuildOfBuildQueueAsync(string buildLocator, Tags body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> GetQueuedBuildAsync(string queuedBuildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> GetQueuedBuildAsync(string queuedBuildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> CancelQueuedBuildAsync(string queuedBuildLocator, BuildCancelRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> CancelQueuedBuildAsync(string queuedBuildLocator, BuildCancelRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteQueuedBuildAsync(string queuedBuildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteQueuedBuildAsync(string queuedBuildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get compatible agents for a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agents> GetCompatibleAgentsForBuildAsync(string queuedBuildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get compatible agents for a queued matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Agents> GetCompatibleAgentsForBuildAsync(string queuedBuildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build configurations.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetAllBuildTypesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build configurations.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetAllBuildTypesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> CreateBuildTypeAsync(BuildType body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> CreateBuildTypeAsync(BuildType body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build configuration matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> GetBuildTypeAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build configuration matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> GetBuildTypeAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete build configuration matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildTypeAsync(string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete build configuration matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildTypeAsync(string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all agent requirements of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirements> GetAllAgentRequirementsAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all agent requirements of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirements> GetAllAgentRequirementsAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add an agent requirement to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirement> AddAgentRequirementToBuildTypeAsync(string btLocator, string fields, AgentRequirement body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an agent requirement to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirement> AddAgentRequirementToBuildTypeAsync(string btLocator, string fields, AgentRequirement body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all agent requirements of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirements> ReplaceAllAgentRequirementsAsync(string btLocator, string fields, AgentRequirements body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all agent requirements of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirements> ReplaceAllAgentRequirementsAsync(string btLocator, string fields, AgentRequirements body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirement> GetAgentRequirementAsync(string btLocator, string agentRequirementLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirement> GetAgentRequirementAsync(string btLocator, string agentRequirementLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirement> ReplaceAgentRequirementAsync(string btLocator, string agentRequirementLocator, string fields, AgentRequirement body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentRequirement> ReplaceAgentRequirementAsync(string btLocator, string agentRequirementLocator, string fields, AgentRequirement body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAgentRequirementAsync(string btLocator, string agentRequirementLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAgentRequirementAsync(string btLocator, string agentRequirementLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a setting of an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAgentRequirementParameterAsync(string btLocator, string agentRequirementLocator, string fieldName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a setting of an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAgentRequirementParameterAsync(string btLocator, string agentRequirementLocator, string fieldName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetAgentRequirementParameterAsync(string btLocator, string agentRequirementLocator, string fieldName, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of an agent requirement of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetAgentRequirementParameterAsync(string btLocator, string agentRequirementLocator, string fieldName, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get external IDs of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Items> GetAliasesAsync(string btLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get external IDs of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Items> GetAliasesAsync(string btLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all artifact dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependencies> GetAllArtifactDependenciesAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all artifact dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependencies> GetAllArtifactDependenciesAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add an artifact dependency to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependency> AddArtifactDependencyToBuildTypeAsync(string btLocator, string fields, ArtifactDependency body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an artifact dependency to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependency> AddArtifactDependencyToBuildTypeAsync(string btLocator, string fields, ArtifactDependency body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all artifact dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependencies> ReplaceAllArtifactDependenciesAsync(string btLocator, string fields, ArtifactDependencies body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all artifact dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependencies> ReplaceAllArtifactDependenciesAsync(string btLocator, string fields, ArtifactDependencies body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependency> GetArtifactDependencyAsync(string btLocator, string artifactDepLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependency> GetArtifactDependencyAsync(string btLocator, string artifactDepLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependency> ReplaceArtifactDependencyAsync(string btLocator, string artifactDepLocator, string fields, ArtifactDependency body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactDependency> ReplaceArtifactDependencyAsync(string btLocator, string artifactDepLocator, string fields, ArtifactDependency body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove an artifact dependency from the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteArtifactDependencyAsync(string btLocator, string artifactDepLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an artifact dependency from the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteArtifactDependencyAsync(string btLocator, string artifactDepLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a parameter of an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetArtifactDependencyParameterAsync(string btLocator, string artifactDepLocator, string fieldName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a parameter of an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetArtifactDependencyParameterAsync(string btLocator, string artifactDepLocator, string fieldName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetArtifactDependencyParameterAsync(string btLocator, string artifactDepLocator, string fieldName, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of an artifact dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetArtifactDependencyParameterAsync(string btLocator, string artifactDepLocator, string fieldName, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all branches of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Branches> GetAllBranchesOfBuildTypeAsync(string btLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all branches of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Branches> GetAllBranchesOfBuildTypeAsync(string btLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get tags of builds of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> GetBuildTypeBuildTagsAsync(string btLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tags of builds of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> GetBuildTypeBuildTagsAsync(string btLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get builds of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetBuildTypeBuildsAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get builds of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetBuildTypeBuildsAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build features of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Features> GetAllBuildFeaturesAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build features of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Features> GetAllBuildFeaturesAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add build feature to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Feature> AddBuildFeatureToBuildTypeAsync(string btLocator, string fields, Feature body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add build feature to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Feature> AddBuildFeatureToBuildTypeAsync(string btLocator, string fields, Feature body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all build features of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Features> ReplaceAllBuildFeaturesAsync(string btLocator, string fields, Features body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all build features of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Features> ReplaceAllBuildFeaturesAsync(string btLocator, string fields, Features body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Feature> GetBuildFeatureAsync(string btLocator, string featureId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Feature> GetBuildFeatureAsync(string btLocator, string featureId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Feature> ReplaceBuildFeatureAsync(string btLocator, string featureId, string fields, Feature body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Feature> ReplaceBuildFeatureAsync(string btLocator, string featureId, string fields, Feature body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFeatureOfBuildTypeAsync(string btLocator, string featureId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFeatureOfBuildTypeAsync(string btLocator, string featureId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all parameters of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetAllBuildFeatureParametersAsync(string btLocator, string featureId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all parameters of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetAllBuildFeatureParametersAsync(string btLocator, string featureId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> ReplaceBuildFeatureParametersAsync(string btLocator, string featureId, Properties body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> ReplaceBuildFeatureParametersAsync(string btLocator, string featureId, Properties body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a parameter of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFeatureParameterAsync(string btLocator, string featureId, string parameterName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a parameter of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFeatureParameterAsync(string btLocator, string featureId, string parameterName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build feature parameter for the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AddParameterToBuildFeatureAsync(string btLocator, string featureId, string parameterName, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build feature parameter for the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AddParameterToBuildFeatureAsync(string btLocator, string featureId, string parameterName, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the setting of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFeatureSettingAsync(string btLocator, string featureId, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the setting of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFeatureSettingAsync(string btLocator, string featureId, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildFeatureParameterAsync(string btLocator, string featureId, string name, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of a build feature of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildFeatureParameterAsync(string btLocator, string featureId, string name, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all investigations of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigations> GetAllInvestigationsOfBuildTypeAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all investigations of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigations> GetAllInvestigationsOfBuildTypeAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Move build type to another project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveBuildTypeAsync(string btLocator, string targetProjectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move build type to another project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveBuildTypeAsync(string btLocator, string targetProjectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildParametersOfBuildTypeAsync(string locator, string fields, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildParametersOfBuildTypeAsync(string locator, string fields, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> CreateBuildParameterOfBuildTypeAsync(Property body, string fields, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> CreateBuildParameterOfBuildTypeAsync(Property body, string fields, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> UpdateBuildParametersOfBuildTypeAsync(Properties body, string fields, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> UpdateBuildParametersOfBuildTypeAsync(Properties body, string fields, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete all build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParametersOfBuildTypeAsync(string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParametersOfBuildTypeAsync(string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> GetBuildParameterOfBuildTypeAsync(string name, string fields, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> GetBuildParameterOfBuildTypeAsync(string name, string fields, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> UpdateBuildParameterOfBuildTypeAsync(string name, Property body, string fields, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> UpdateBuildParameterOfBuildTypeAsync(string name, Property body, string fields, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParameterOfBuildTypeAsync(string name, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParameterOfBuildTypeAsync(string name, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> GetBuildParameterTypeOfBuildTypeAsync(string name, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> GetBuildParameterTypeOfBuildTypeAsync(string name, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> UpdateBuildParameterTypeOfBuildTypeAsync(string name, Type body, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> UpdateBuildParameterTypeOfBuildTypeAsync(string name, Type body, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterSpecificationOfBuildTypeAsync(string name, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterSpecificationOfBuildTypeAsync(string name, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterSpecificationOfBuildTypeAsync(string name, string body, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterSpecificationOfBuildTypeAsync(string name, string body, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterValueOfBuildTypeAsync(string name, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterValueOfBuildTypeAsync(string name, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterValueOfBuildTypeAsync(string name, string body, string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterValueOfBuildTypeAsync(string name, string body, string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the settings file of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildTypeSettingsFileAsync(string btLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the settings file of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildTypeSettingsFileAsync(string btLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all snapshot dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependencies> GetAllSnapshotDependenciesAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all snapshot dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependencies> GetAllSnapshotDependenciesAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a snapshot dependency to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependency> AddSnapshotDependencyToBuildTypeAsync(string btLocator, string fields, SnapshotDependency body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a snapshot dependency to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependency> AddSnapshotDependencyToBuildTypeAsync(string btLocator, string fields, SnapshotDependency body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all snapshot dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependencies> ReplaceAllSnapshotDependenciesAsync(string btLocator, string fields, SnapshotDependencies body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all snapshot dependencies of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependencies> ReplaceAllSnapshotDependenciesAsync(string btLocator, string fields, SnapshotDependencies body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a snapshot dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependency> GetSnapshotDependencyAsync(string btLocator, string snapshotDepLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a snapshot dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependency> GetSnapshotDependencyAsync(string btLocator, string snapshotDepLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a snapshot dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependency> ReplaceSnapshotDependencyAsync(string btLocator, string snapshotDepLocator, string fields, SnapshotDependency body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a snapshot dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotDependency> ReplaceSnapshotDependencyAsync(string btLocator, string snapshotDepLocator, string fields, SnapshotDependency body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a snapshot dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSnapshotDependencyAsync(string btLocator, string snapshotDepLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a snapshot dependency of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSnapshotDependencyAsync(string btLocator, string snapshotDepLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build steps of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Steps> GetAllBuildStepsAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build steps of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Steps> GetAllBuildStepsAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a build step to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Step> AddBuildStepToBuildTypeAsync(string btLocator, string fields, Step body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a build step to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Step> AddBuildStepToBuildTypeAsync(string btLocator, string fields, Step body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all build steps of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Steps> ReplaceAllBuildStepsAsync(string btLocator, string fields, Steps body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all build steps of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Steps> ReplaceAllBuildStepsAsync(string btLocator, string fields, Steps body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Step> GetBuildStepAsync(string btLocator, string stepId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Step> GetBuildStepAsync(string btLocator, string stepId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Replace a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Step> ReplaceBuildStepAsync(string btLocator, string stepId, string fields, Step body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Step> ReplaceBuildStepAsync(string btLocator, string stepId, string fields, Step body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildStepAsync(string btLocator, string stepId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildStepAsync(string btLocator, string stepId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all parameters of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetAllBuildStepParametersAsync(string btLocator, string stepId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all parameters of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetAllBuildStepParametersAsync(string btLocator, string stepId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> DeleteBuildStepParametersAsync(string btLocator, string stepId, Properties body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> DeleteBuildStepParametersAsync(string btLocator, string stepId, Properties body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a parameter of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStepParameterAsync(string btLocator, string stepId, string parameterName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a parameter of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStepParameterAsync(string btLocator, string stepId, string parameterName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a parameter to a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AddParameterToBuildStepAsync(string btLocator, string stepId, string parameterName, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a parameter to a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AddParameterToBuildStepAsync(string btLocator, string stepId, string parameterName, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the setting of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStepSettingAsync(string btLocator, string stepId, string fieldName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the setting of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStepSettingAsync(string btLocator, string stepId, string fieldName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildStepParameterAsync(string btLocator, string stepId, string fieldName, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of a build step of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildStepParameterAsync(string btLocator, string stepId, string fieldName, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build templates of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetAllBuildTemplatesAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build templates of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetAllBuildTemplatesAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a build template to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> AddBuildTemplateAsync(string btLocator, BuildType body, bool? optimizeSettings, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a build template to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> AddBuildTemplateAsync(string btLocator, BuildType body, bool? optimizeSettings, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all templates of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> SetBuildTypeTemplatesAsync(string btLocator, BuildTypes body, bool? optimizeSettings, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all templates of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> SetBuildTypeTemplatesAsync(string btLocator, BuildTypes body, bool? optimizeSettings, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Detach all templates from the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveAllTemplatesAsync(string btLocator, bool? inlineSettings);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detach all templates from the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveAllTemplatesAsync(string btLocator, bool? inlineSettings, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a template of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> GetBuildTemplateAsync(string btLocator, string templateLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a template of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> GetBuildTemplateAsync(string btLocator, string templateLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Detach a template from the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveTemplateAsync(string btLocator, string templateLocator, bool? inlineSettings);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detach a template from the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveTemplateAsync(string btLocator, string templateLocator, bool? inlineSettings, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all triggers of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Triggers> GetAllTriggersAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all triggers of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Triggers> GetAllTriggersAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a trigger to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Trigger> AddTriggerToBuildTypeAsync(string btLocator, string fields, Trigger body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a trigger to the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Trigger> AddTriggerToBuildTypeAsync(string btLocator, string fields, Trigger body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all triggers of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Triggers> ReplaceAllTriggersAsync(string btLocator, string fields, Triggers body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all triggers of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Triggers> ReplaceAllTriggersAsync(string btLocator, string fields, Triggers body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Trigger> GetTriggerAsync(string btLocator, string triggerLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Trigger> GetTriggerAsync(string btLocator, string triggerLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Trigger> ReplaceTriggerAsync(string btLocator, string triggerLocator, string fields, Trigger body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Trigger> ReplaceTriggerAsync(string btLocator, string triggerLocator, string fields, Trigger body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTriggerAsync(string btLocator, string triggerLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTriggerAsync(string btLocator, string triggerLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a parameter of a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTriggerParameterAsync(string btLocator, string triggerLocator, string fieldName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a parameter of a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTriggerParameterAsync(string btLocator, string triggerLocator, string fieldName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter of a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetTriggerParameterAsync(string btLocator, string triggerLocator, string fieldName, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter of a trigger of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetTriggerParameterAsync(string btLocator, string triggerLocator, string fieldName, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all VCS roots of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntries> GetAllVcsRootsOfBuildTypeAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all VCS roots of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntries> GetAllVcsRootsOfBuildTypeAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a VCS root to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntry> AddVcsRootToBuildTypeAsync(string btLocator, VcsRootEntry body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a VCS root to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntry> AddVcsRootToBuildTypeAsync(string btLocator, VcsRootEntry body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all VCS roots of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntries> ReplaceAllVcsRootsAsync(string btLocator, VcsRootEntries body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all VCS roots of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntries> ReplaceAllVcsRootsAsync(string btLocator, VcsRootEntries body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntry> GetVcsRootAsync(string btLocator, string vcsRootLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntry> GetVcsRootAsync(string btLocator, string vcsRootLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntry> UpdateBuildTypeVcsRootAsync(string btLocator, string vcsRootLocator, VcsRootEntry body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootEntry> UpdateBuildTypeVcsRootAsync(string btLocator, string vcsRootLocator, VcsRootEntry body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootOfBuildTypeAsync(string btLocator, string vcsRootLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootOfBuildTypeAsync(string btLocator, string vcsRootLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get checkout rules of a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootCheckoutRulesAsync(string btLocator, string vcsRootLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get checkout rules of a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootCheckoutRulesAsync(string btLocator, string vcsRootLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update checkout rules of a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildTypeVcsRootCheckoutRulesAsync(string btLocator, string vcsRootLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update checkout rules of a VCS root of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildTypeVcsRootCheckoutRulesAsync(string btLocator, string vcsRootLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListOfBuildTypeAsync(string basePath, string locator, string fields, string btLocator, bool? resolveParameters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListOfBuildTypeAsync(string basePath, string locator, string fields, string btLocator, bool? resolveParameters, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileOfBuildTypeAsync(string path, string basePath, string locator, string name, string btLocator, bool? resolveParameters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileOfBuildTypeAsync(string path, string basePath, string locator, string name, string btLocator, bool? resolveParameters, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileOfBuildTypeAsync(string path, string btLocator, bool? resolveParameters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileOfBuildTypeAsync(string path, string btLocator, bool? resolveParameters, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataOfBuildTypeAsync(string path, string fields, string btLocator, bool? resolveParameters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataOfBuildTypeAsync(string path, string fields, string btLocator, bool? resolveParameters, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathOfBuildTypeAsync(string path, string basePath, string locator, string fields, string btLocator, bool? resolveParameters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathOfBuildTypeAsync(string path, string basePath, string locator, string fields, string btLocator, bool? resolveParameters, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all VCS root instances of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> GetVcsRootInstancesOfBuildTypeAsync(string btLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all VCS root instances of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> GetVcsRootInstancesOfBuildTypeAsync(string btLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildTypeFieldAsync(string btLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildTypeFieldAsync(string btLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a field of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildTypeFieldAsync(string btLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a field of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildTypeFieldAsync(string btLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetAllBuildsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetAllBuildsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the build status of aggregated matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAggregatedBuildStatusAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the build status of aggregated matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAggregatedBuildStatusAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the status icon (in specified format) of aggregated matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAggregatedBuildStatusIconAsync(string buildLocator, string suffix);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the status icon (in specified format) of aggregated matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAggregatedBuildStatusIconAsync(string buildLocator, string suffix, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get multiple builds matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetMultipleBuildsAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get multiple builds matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetMultipleBuildsAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// cancelMultipleBuilds
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> CancelMultipleAsync(string buildLocator, BuildCancelRequest body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// cancelMultipleBuilds
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> CancelMultipleAsync(string buildLocator, BuildCancelRequest body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete multiple builds matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> DeleteMultipleBuildsAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete multiple builds matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> DeleteMultipleBuildsAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update comments in multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> SetMultipleBuildCommentsAsync(string buildLocator, string body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update comments in multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> SetMultipleBuildCommentsAsync(string buildLocator, string body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete comments of multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> DeleteMultipleBuildCommentsAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete comments of multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> DeleteMultipleBuildCommentsAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Pin multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> PinMultipleBuildsAsync(string buildLocator, PinInfo body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pin multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> PinMultipleBuildsAsync(string buildLocator, PinInfo body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add tags to multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> AddTagsToMultipleBuildsAsync(string buildLocator, Tags body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add tags to multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> AddTagsToMultipleBuildsAsync(string buildLocator, Tags body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove tags from multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> RemoveMultipleBuildTagsAsync(string buildLocator, Tags body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove tags from multiple matching builds.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultipleOperationResult> RemoveMultipleBuildTagsAsync(string buildLocator, Tags body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> GetBuildAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> GetBuildAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// cancelBuild
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> CancelBuildAsync(string buildLocator, BuildCancelRequest body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// cancelBuild
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> CancelBuildAsync(string buildLocator, BuildCancelRequest body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete build matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete build matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get artifact dependency changes of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildChanges> GetArtifactDependencyChangesAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get artifact dependency changes of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildChanges> GetArtifactDependencyChangesAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListOfBuildAsync(string basePath, string locator, string fields, string buildLocator, bool? resolveParameters, bool? logBuildUsage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListOfBuildAsync(string basePath, string locator, string fields, string buildLocator, bool? resolveParameters, bool? logBuildUsage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileOfBuildAsync(string path, string basePath, string locator, string name, string buildLocator, bool? resolveParameters, bool? logBuildUsage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileOfBuildAsync(string path, string basePath, string locator, string name, string buildLocator, bool? resolveParameters, bool? logBuildUsage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileOfBuildAsync(string path, string buildLocator, bool? resolveParameters, bool? logBuildUsage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileOfBuildAsync(string path, string buildLocator, bool? resolveParameters, bool? logBuildUsage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataOfBuildAsync(string path, string fields, string buildLocator, bool? resolveParameters, bool? logBuildUsage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataOfBuildAsync(string path, string fields, string buildLocator, bool? resolveParameters, bool? logBuildUsage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathOfBuildAsync(string path, string basePath, string locator, string fields, string buildLocator, bool? resolveParameters, bool? logBuildUsage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathOfBuildAsync(string path, string basePath, string locator, string fields, string buildLocator, bool? resolveParameters, bool? logBuildUsage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the artifacts' directory of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetArtifactsDirectoryAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the artifacts' directory of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetArtifactsDirectoryAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove build parameters from the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetBuildFinishPropertiesAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove build parameters from the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetBuildFinishPropertiesAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check if the matching build is canceled.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Comment> GetCanceledInfoAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if the matching build is canceled.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Comment> GetCanceledInfoAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the comment on the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetBuildCommentAsync(string buildLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the comment on the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetBuildCommentAsync(string buildLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove the build comment matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildCommentAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the build comment matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildCommentAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetFinishedTimeAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetFinishedTimeAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the finish date of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFinishDateAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the finish date of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFinishDateAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildFinishDateAsync(string buildLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildFinishDateAsync(string buildLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddLogMessageToBuildAsync(string buildLocator, string body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a message to the build log. Service messages are accepted.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddLogMessageToBuildAsync(string buildLocator, string body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the number of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildNumberAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the number of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildNumberAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the number of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildNumberAsync(string buildLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the number of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildNumberAsync(string buildLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check if the matching build is pinned.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PinInfo> GetBuildPinInfoAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if the matching build is pinned.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PinInfo> GetBuildPinInfoAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the pin info of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PinInfo> SetBuildPinInfoAsync(string buildLocator, PinInfo body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the pin info of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PinInfo> SetBuildPinInfoAsync(string buildLocator, PinInfo body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build problems of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrences> GetBuildProblemsAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build problems of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrences> GetBuildProblemsAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a build problem to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrence> AddProblemToBuildAsync(string buildLocator, string body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a build problem to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrence> AddProblemToBuildAsync(string buildLocator, string body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get related issues of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuesUsages> GetBuildRelatedIssuesAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get related issues of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuesUsages> GetBuildRelatedIssuesAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the resolvement status of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildResolvedAsync(string buildLocator, string value);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the resolvement status of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildResolvedAsync(string buildLocator, string value, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get actual build parameters of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildActualParametersAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get actual build parameters of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildActualParametersAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the final value that a given parameter had after the build finished.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildResultingPropertiesAsync(string buildLocator, string propertyName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the final value that a given parameter had after the build finished.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildResultingPropertiesAsync(string buildLocator, string propertyName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> MarkBuildAsRunningAsync(string buildLocator, string body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Build> MarkBuildAsRunningAsync(string buildLocator, string body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a source file of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetBuildSourceFileAsync(string buildLocator, string fileName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a source file of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetBuildSourceFileAsync(string buildLocator, string fileName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all statistical values of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildStatisticValuesAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all statistical values of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildStatisticValuesAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a statistical value of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStatisticValueAsync(string buildLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a statistical value of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStatisticValueAsync(string buildLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get status of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStatusAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStatusAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Change status of the build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetBuildStatusAsync(string buildLocator, string fields, BuildStatusUpdate body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change status of the build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetBuildStatusAsync(string buildLocator, string fields, BuildStatusUpdate body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the status icon (in specified format) of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetBuildStatusIconAsync(string buildLocator, string suffix);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the status icon (in specified format) of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetBuildStatusIconAsync(string buildLocator, string suffix, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the build status text of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStatusTextAsync(string buildLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the build status text of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildStatusTextAsync(string buildLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the build status of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildStatusTextAsync(string buildLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the build status of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetBuildStatusTextAsync(string buildLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get tags of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> GetBuildTagsAsync(string buildLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tags of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> GetBuildTagsAsync(string buildLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add tags to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> AddTagsToBuildAsync(string buildLocator, Tags body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add tags to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> AddTagsToBuildAsync(string buildLocator, Tags body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update tags of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> SetBuildTagsAsync(string buildLocator, string locator, Tags body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update tags of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tags> SetBuildTagsAsync(string buildLocator, string locator, Tags body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get test occurrences of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestOccurrences> GetBuildTestOccurrencesAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get test occurrences of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestOccurrences> GetBuildTestOccurrencesAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get VCS labels of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsLabels> GetBuildVcsLabelsAsync(string buildLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get VCS labels of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsLabels> GetBuildVcsLabelsAsync(string buildLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a VCS label to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsLabels> AddBuildVcsLabelAsync(string buildLocator, string locator, string fields, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a VCS label to the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsLabels> AddBuildVcsLabelAsync(string buildLocator, string locator, string fields, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFieldAsync(string buildLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching build.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFieldAsync(string buildLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all changes.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Changes> GetAllChangesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all changes.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Changes> GetAllChangesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get change matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Change> GetChangeAsync(string changeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get change matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Change> GetChangeAsync(string changeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attributes of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Entries> GetChangeAttributesAsync(string changeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attributes of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Entries> GetChangeAttributesAsync(string changeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get duplicates of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Changes> GetChangeDuplicatesAsync(string changeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get duplicates of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Changes> GetChangeDuplicatesAsync(string changeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get first builds of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetChangeFirstBuildsAsync(string changeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get first builds of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Builds> GetChangeFirstBuildsAsync(string changeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get issues of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Issues> GetChangeIssueAsync(string changeLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issues of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Issues> GetChangeIssueAsync(string changeLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get parent changes of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Changes> GetChangeParentChangesAsync(string changeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get parent changes of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Changes> GetChangeParentChangesAsync(string changeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get parent revisions of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Items> GetChangeParentRevisionsAsync(string changeLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get parent revisions of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Items> GetChangeParentRevisionsAsync(string changeLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a VCS root instance of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstance> GetChangeVcsRootAsync(string changeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a VCS root instance of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstance> GetChangeVcsRootAsync(string changeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetChangeFieldAsync(string changeLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching change.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetChangeFieldAsync(string changeLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all cloud images.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudImages> GetAllCloudImagesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all cloud images.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudImages> GetAllCloudImagesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get cloud image matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudImage> GetCloudImageAsync(string imageLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cloud image matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudImage> GetCloudImageAsync(string imageLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all cloud instances.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudInstances> GetAllCloudInstancesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all cloud instances.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudInstances> GetAllCloudInstancesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start a new cloud instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartInstanceAsync(CloudInstance body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a new cloud instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartInstanceAsync(CloudInstance body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get cloud instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudInstance> GetCloudInstanceAsync(string instanceLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cloud instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudInstance> GetCloudInstanceAsync(string instanceLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stop cloud instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopInstanceAsync(string instanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop cloud instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopInstanceAsync(string instanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Terminates existing cloud instance immediately
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForseTerminateInstanceAsync(string instanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Terminates existing cloud instance immediately
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForseTerminateInstanceAsync(string instanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Schedules existing cloud instance for termination
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TerminateInstanceAsync(string instanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Schedules existing cloud instance for termination
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TerminateInstanceAsync(string instanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all cloud profiles.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudProfiles> GetAllCloudProfilesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all cloud profiles.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudProfiles> GetAllCloudProfilesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get cloud profile matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudProfile> GetCloudProfileAsync(string profileLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cloud profile matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CloudProfile> GetCloudProfileAsync(string profileLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all deployment dashboards.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboards> GetAllDashboardsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all deployment dashboards.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboards> GetAllDashboardsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new deployment dashboard.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboard> CreateDashboardAsync(DeploymentDashboard body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new deployment dashboard.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboard> CreateDashboardAsync(DeploymentDashboard body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the deployment dashboard matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboard> GetDashboardAsync(string deploymentDashboardLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the deployment dashboard matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboard> GetDashboardAsync(string deploymentDashboardLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete the deployment dashboard matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDashboardAsync(string deploymentDashboardLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the deployment dashboard matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDashboardAsync(string deploymentDashboardLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get deployment instances for a given deployment dashboard.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstances> GetInstancesAsync(string deploymentDashboardLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get deployment instances for a given deployment dashboard.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstances> GetInstancesAsync(string deploymentDashboardLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new deployment instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstance> CreateInstanceAsync(string deploymentDashboardLocator, DeploymentInstance body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new deployment instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstance> CreateInstanceAsync(string deploymentDashboardLocator, DeploymentInstance body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the deployment instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstance> GetInstanceAsync(string deploymentDashboardLocator, string deploymentInstanceLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the deployment instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstance> GetInstanceAsync(string deploymentDashboardLocator, string deploymentInstanceLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Report a new deployment for instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstance> ReportNewDeploymentForInstanceAsync(string deploymentDashboardLocator, string deploymentInstanceLocator, deploymentStateEntry body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Report a new deployment for instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentInstance> ReportNewDeploymentForInstanceAsync(string deploymentDashboardLocator, string deploymentInstanceLocator, deploymentStateEntry body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete the deployment instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInstanceAsync(string deploymentDashboardLocator, string deploymentInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the deployment instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInstanceAsync(string deploymentDashboardLocator, string deploymentInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthStatusItems> GetHealthItemsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthStatusItems> GetHealthItemsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCategories> GetCategoriesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCategories> GetCategoriesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCategory> GetSingleCategoryAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCategory> GetSingleCategoryAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthItem> GetSingleHealthItemAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthItem> GetSingleHealthItemAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the plugin info.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plugin> GetPluginInfoAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the plugin info.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plugin> GetPluginInfoAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all investigations.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigations> GetAllInvestigationsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all investigations.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigations> GetAllInvestigationsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new investigation.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigation> AddInvestigationAsync(Investigation body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new investigation.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigation> AddInvestigationAsync(Investigation body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create multiple new investigations.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigations> AddMultipleInvestigationsAsync(Investigations body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple new investigations.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigations> AddMultipleInvestigationsAsync(Investigations body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get investigation matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigation> GetInvestigationAsync(string investigationLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get investigation matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigation> GetInvestigationAsync(string investigationLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update investigation matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigation> ReplaceInvestigationAsync(string investigationLocator, Investigation body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update investigation matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Investigation> ReplaceInvestigationAsync(string investigationLocator, Investigation body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete investigation matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInvestigationAsync(string investigationLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete investigation matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInvestigationAsync(string investigationLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all muted tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mutes> GetAllMutedTestsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all muted tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mutes> GetAllMutedTestsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mute a test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mute> MuteTestAsync(Mute body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mute a test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mute> MuteTestAsync(Mute body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mute multiple tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mutes> MuteMultipleTestsAsync(Mutes body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mute multiple tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mutes> MuteMultipleTestsAsync(Mutes body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unmute multiple tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnmuteMultipleTestsAsync(Mutes body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unmute multiple tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnmuteMultipleTestsAsync(Mutes body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a muted test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mute> GetMutedTestAsync(string muteLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a muted test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Mute> GetMutedTestAsync(string muteLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unmute the matching test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnmuteTestAsync(string muteLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unmute the matching test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnmuteTestAsync(string muteLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build problem occurrences.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrences> GetAllBuildProblemOccurrencesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build problem occurrences.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrences> GetAllBuildProblemOccurrencesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a matching build problem occurrence.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrence> GetBuildProblemOccurrenceAsync(string problemLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a matching build problem occurrence.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProblemOccurrence> GetBuildProblemOccurrenceAsync(string problemLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build problems.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Problems> GetAllBuildProblemsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build problems.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Problems> GetAllBuildProblemsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a matching build problem.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Problem> GetBuildProblemAsync(string problemLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a matching build problem.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Problem> GetBuildProblemAsync(string problemLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all projects.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetAllProjectsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all projects.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetAllProjectsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> AddProjectAsync(NewProjectDescription body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> AddProjectAsync(NewProjectDescription body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a list of projects that are affected by Load Settings from VCS action.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetVersionedSettingsProjectsToLoadAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of projects that are affected by Load Settings from VCS action.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetVersionedSettingsProjectsToLoadAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check for changes in Versioned Settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckForVersionedSettingsChangesAsync(string locator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check for changes in Versioned Settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckForVersionedSettingsChangesAsync(string locator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Perform Versioned Settings action: Commit current settings to VCS.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CommitCurrentSettingsAsync(string locator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Perform Versioned Settings action: Commit current settings to VCS.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CommitCurrentSettingsAsync(string locator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Versioned Settings config.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsConfig> GetVersionedSettingsConfigAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Versioned Settings config.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsConfig> GetVersionedSettingsConfigAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Verseioned Settings config.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsConfig> SetVersionedSettingsConfigAsync(string locator, VersionedSettingsConfig body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Verseioned Settings config.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsConfig> SetVersionedSettingsConfigAsync(string locator, VersionedSettingsConfig body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Versioned Settings config parameter value.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVersionedSettingsConfigParameterAsync(string locator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Versioned Settings config parameter value.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVersionedSettingsConfigParameterAsync(string locator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Versioned Settings config parameter value.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVersionedSettingsConfigParameterAsync(string locator, string name, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Versioned Settings config parameter value.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVersionedSettingsConfigParameterAsync(string locator, string name, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Versioned Settings config parameter value.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVersionedSettingsConfigParameterAsync(string locator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Versioned Settings config parameter value.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVersionedSettingsConfigParameterAsync(string locator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Versioned Settings Context Parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsContextParameters> GetVersionedSettingsContextParametersAsync(string locator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Versioned Settings Context Parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsContextParameters> GetVersionedSettingsContextParametersAsync(string locator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Versioned Settings Context Parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsContextParameters> SetVersionedSettingsContextParametersAsync(string locator, VersionedSettingsContextParameters body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Versioned Settings Context Parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsContextParameters> SetVersionedSettingsContextParametersAsync(string locator, VersionedSettingsContextParameters body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Perform Versioned Settings action: Load Setting from VCS.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> LoadSettingsFromVCSAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Perform Versioned Settings action: Load Setting from VCS.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> LoadSettingsFromVCSAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get current status of Versioned Settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsStatus> GetVersionedSettingsStatusAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current status of Versioned Settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsStatus> GetVersionedSettingsStatusAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Versioned Settings Tokens.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsTokens> GetVersionedSettingsTokensAsync(string locator, string status);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Versioned Settings Tokens.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsTokens> GetVersionedSettingsTokensAsync(string locator, string status, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Versioned Settings Tokens.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsTokens> AddVersionedSettingsTokensAsync(string locator, VersionedSettingsTokens body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Versioned Settings Tokens.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsTokens> AddVersionedSettingsTokensAsync(string locator, VersionedSettingsTokens body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Versioned Settings Tokens.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsTokens> DeleteVersionedSettingsTokensAsync(string locator, VersionedSettingsTokens body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Versioned Settings Tokens.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionedSettingsTokens> DeleteVersionedSettingsTokensAsync(string locator, VersionedSettingsTokens body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get project matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> GetProjectAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> GetProjectAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete project matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAsync(string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAsync(string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get agent pools appointed to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPools> GetAgentPoolsProjectAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get agent pools appointed to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPools> GetAgentPoolsProjectAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign the matching project to the agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> AddAgentPoolsProjectAsync(string projectLocator, AgentPool body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign the matching project to the agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPool> AddAgentPoolsProjectAsync(string projectLocator, AgentPool body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update agent pools apppointed to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPools> SetAgentPoolsProjectAsync(string projectLocator, AgentPools body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update agent pools apppointed to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentPools> SetAgentPoolsProjectAsync(string projectLocator, AgentPools body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unassign a project from the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveProjectFromAgentPoolAsync(string projectLocator, string agentPoolLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign a project from the matching agent pool.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveProjectFromAgentPoolAsync(string projectLocator, string agentPoolLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all branches of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Branches> GetAllBranchesAsync(string projectLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all branches of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Branches> GetAllBranchesAsync(string projectLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a build configuration to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> AddBuildTypeAsync(string projectLocator, NewBuildTypeDescription body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a build configuration to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> AddBuildTypeAsync(string projectLocator, NewBuildTypeDescription body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the default template of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> GetDefaultTemplateAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the default template of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> GetDefaultTemplateAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the default template of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> SetDefaultTemplateAsync(string projectLocator, BuildType body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the default template of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> SetDefaultTemplateAsync(string projectLocator, BuildType body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove the default template from the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDefaultTemplateAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the default template from the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDefaultTemplateAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getDefaultValueSets
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TypedValueSets> GetDefaultValueSetsAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getDefaultValueSets
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TypedValueSets> GetDefaultValueSetsAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getDeploymentDashboardsInProjet
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboards> GetDeploymentDashboardsInProjectAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getDeploymentDashboardsInProjet
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboards> GetDeploymentDashboardsInProjectAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getDeploymentDashboardInProject
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboard> GetDeploymentDashboardInProjectAsync(string projectLocator, string dashboardLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getDeploymentDashboardInProject
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDashboard> GetDeploymentDashboardInProjectAsync(string projectLocator, string dashboardLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all build configurations from the matching project, with custom ordering applied.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetAllBuildTypesOrderedAsync(string projectLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all build configurations from the matching project, with custom ordering applied.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetAllBuildTypesOrderedAsync(string projectLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update custom ordering of build configurations of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> SetBuildTypesOrderAsync(string projectLocator, BuildTypes body, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom ordering of build configurations of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> SetBuildTypesOrderAsync(string projectLocator, BuildTypes body, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all subprojects of the matching project, with custom ordering applied.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetAllSubprojectsOrderedAsync(string projectLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all subprojects of the matching project, with custom ordering applied.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> GetAllSubprojectsOrderedAsync(string projectLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update custom ordering of subprojects of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> SetSubprojectsOrderAsync(string projectLocator, Projects body, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom ordering of subprojects of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Projects> SetSubprojectsOrderAsync(string projectLocator, Projects body, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildParametersAsync(string locator, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetBuildParametersAsync(string locator, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> CreateBuildParameterAsync(Property body, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> CreateBuildParameterAsync(Property body, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> UpdateBuildParametersAsync(Properties body, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> UpdateBuildParametersAsync(Properties body, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete all build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParametersAsync(string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all build parameters.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParametersAsync(string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> GetBuildParameterAsync(string name, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> GetBuildParameterAsync(string name, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> UpdateBuildParameterAsync(string name, Property body, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Property> UpdateBuildParameterAsync(string name, Property body, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParameterAsync(string name, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildParameterAsync(string name, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> GetBuildParameterTypeAsync(string name, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> GetBuildParameterTypeAsync(string name, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> UpdateBuildParameterTypeAsync(string name, Type body, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update type of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Type> UpdateBuildParameterTypeAsync(string name, Type body, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterSpecificationAsync(string name, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterSpecificationAsync(string name, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterSpecificationAsync(string name, string body, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update build parameter specification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterSpecificationAsync(string name, string body, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterValueAsync(string name, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildParameterValueAsync(string name, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterValueAsync(string name, string body, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update value of build parameter.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateBuildParameterValueAsync(string name, string body, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the parent project of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> GetProjectParentProjectAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the parent project of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> GetProjectParentProjectAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the parent project of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> SetParentProjectAsync(string projectLocator, Project body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the parent project of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> SetParentProjectAsync(string projectLocator, Project body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all features.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetFeaturesAsync(string locator, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all features.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetFeaturesAsync(string locator, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddFeatureAsync(ProjectFeature body, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddFeatureAsync(ProjectFeature body, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all features.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFeaturesAsync(ProjectFeatures body, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all features.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFeaturesAsync(ProjectFeatures body, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a matching feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetFeatureAsync(string featureLocator, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a matching feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetFeatureAsync(string featureLocator, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a matching feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFeatureAsync(string featureLocator, ProjectFeature body, string fields, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a matching feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFeatureAsync(string featureLocator, ProjectFeature body, string fields, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a matching feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFeatureAsync(string featureLocator, string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a matching feature.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFeatureAsync(string featureLocator, string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AddSecureTokenAsync(string projectLocator, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens) to store the sensitive value passed in the request body. Returns the scrambled value that is the new token name. This operation is available only for users with the EDIT_PROJECT permission (included in the Project Administrator role by default).
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AddSecureTokenAsync(string projectLocator, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSecureValueAsync(string projectLocator, string token);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the value of the given [secure token](https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html#Managing+Tokens).This operation is available only for users with the CHANGE_SERVER_SETTINGS permission (included only in System Administrator role by default).
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSecureValueAsync(string projectLocator, string token, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the settings file of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetProjectSettingsFileAsync(string projectLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the settings file of the matching build configuration.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetProjectSettingsFileAsync(string projectLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all templates of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetProjectTemplatesAsync(string projectLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all templates of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildTypes> GetProjectTemplatesAsync(string projectLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a build configuration template to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> AddTemplateAsync(string projectLocator, NewBuildTypeDescription body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a build configuration template to the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildType> AddTemplateAsync(string projectLocator, NewBuildTypeDescription body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetProjectFieldAsync(string projectLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetProjectFieldAsync(string projectLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a field of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetProjectFieldAsync(string projectLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a field of the matching project.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetProjectFieldAsync(string projectLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> GetRolesAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> GetRolesAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> CreateRoleAsync(Role body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> CreateRoleAsync(Role body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a role with specified id.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetRoleAsync(string id, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a role with specified id.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetRoleAsync(string id, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a role matching the id.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role matching the id.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add an included role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddIncludedRoleAsync(string roleId, string includedId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an included role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddIncludedRoleAsync(string roleId, string includedId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove an included role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> RemoveIncludedRoleAsync(string roleId, string includedId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an included role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> RemoveIncludedRoleAsync(string roleId, string includedId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a permission to a role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddPermissionAsync(string roleId, string permissionId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a permission to a role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddPermissionAsync(string roleId, string permissionId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a permission from a role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> RemovePermissionAsync(string roleId, string permissionId, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a permission from a role.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> RemovePermissionAsync(string roleId, string permissionId, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the server info.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Server> GetServerInfoAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the server info.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Server> GetServerInfoAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get authentication settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerAuthSettings> GetAuthSettingsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerAuthSettings> GetAuthSettingsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set authentication settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerAuthSettings> SetAuthSettingsAsync(ServerAuthSettings body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set authentication settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerAuthSettings> SetAuthSettingsAsync(ServerAuthSettings body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the latest backup status.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBackupStatusAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the latest backup status.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBackupStatusAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start a new backup.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> StartBackupAsync(string fileName, bool? addTimestamp, bool? includeConfigs, bool? includeDatabase, bool? includeBuildLogs, bool? includePersonalChanges, bool? includeRunningBuilds, bool? includeSupplimentaryData);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a new backup.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> StartBackupAsync(string fileName, bool? addTimestamp, bool? includeConfigs, bool? includeDatabase, bool? includeBuildLogs, bool? includePersonalChanges, bool? includeRunningBuilds, bool? includeSupplimentaryData, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get clean-up settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cleanup> GetCleanupSettingsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get clean-up settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cleanup> GetCleanupSettingsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set clean-up settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cleanup> SetCleanupSettingsAsync(Cleanup body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set clean-up settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cleanup> SetCleanupSettingsAsync(Cleanup body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListOfServerAsync(string basePath, string locator, string fields, string areaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListOfServerAsync(string basePath, string locator, string fields, string areaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileOfServerAsync(string path, string basePath, string locator, string name, string areaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileOfServerAsync(string path, string basePath, string locator, string name, string areaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileOfServerAsync(string path, string areaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileOfServerAsync(string path, string areaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataOfServerAsync(string path, string fields, string areaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataOfServerAsync(string path, string fields, string areaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathOfServerAsync(string path, string basePath, string locator, string fields, string areaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathOfServerAsync(string path, string basePath, string locator, string fields, string areaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get global settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerGlobalSettings> GetGlobalSettingsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get global settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerGlobalSettings> GetGlobalSettingsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set global settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerGlobalSettings> SetGlobalSettingsAsync(ServerGlobalSettings body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set global settings.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerGlobalSettings> SetGlobalSettingsAsync(ServerGlobalSettings body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the licensing data.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicensingData> GetLicensingDataAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the licensing data.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicensingData> GetLicensingDataAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all license keys.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseKeys> GetLicenseKeysAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all license keys.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseKeys> GetLicenseKeysAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add license keys.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseKeys> AddLicenseKeysAsync(string body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add license keys.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseKeys> AddLicenseKeysAsync(string body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a license key.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseKey> GetLicenseKeyAsync(string licenseKey, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a license key.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseKey> GetLicenseKeyAsync(string licenseKey, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a license key.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLicenseKeyAsync(string licenseKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a license key.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLicenseKeyAsync(string licenseKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get metrics.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Metrics> GetAllMetricsAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get metrics.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Metrics> GetAllMetricsAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all TeamCity nodes.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Nodes> GetAllNodesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all TeamCity nodes.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Nodes> GetAllNodesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Node> GetNodeAsync(string nodeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Node> GetNodeAsync(string nodeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all effective responsibilities for a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisabledResponsibilities> GetDisabledResponsibilitiesAsync(string nodeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all effective responsibilities for a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisabledResponsibilities> GetDisabledResponsibilitiesAsync(string nodeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all effective responsibilities for a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EffectiveResponsibilities> GetEffectiveResponsibilitiesAsync(string nodeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all effective responsibilities for a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EffectiveResponsibilities> GetEffectiveResponsibilitiesAsync(string nodeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all enabled responsibilities for a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledResponsibilities> GetEnabledResponsibilitiesAsync(string nodeLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all enabled responsibilities for a node matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledResponsibilities> GetEnabledResponsibilitiesAsync(string nodeLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enables or disables responsibility for a node.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledResponsibilities> ChangeNodeResponsibilityAsync(string nodeLocator, string name, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enables or disables responsibility for a node.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnabledResponsibilities> ChangeNodeResponsibilityAsync(string nodeLocator, string name, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all plugins.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plugins> GetAllPluginsAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all plugins.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plugins> GetAllPluginsAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the server info.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetServerFieldAsync(string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the server info.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetServerFieldAsync(string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all test occurrences.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestOccurrences> GetAllTestOccurrencesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all test occurrences.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestOccurrences> GetAllTestOccurrencesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a matching test occurrence.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestOccurrence> GetTestOccurrenceAsync(string testLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a matching test occurrence.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestOccurrence> GetTestOccurrenceAsync(string testLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tests> GetTestsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all tests.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tests> GetTestsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a matching test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Test> GetTestAsync(string testLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a matching test.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Test> GetTestAsync(string testLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all user groups.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> GetAllGroupsAsync(string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all user groups.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> GetAllGroupsAsync(string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a new user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> AddGroupAsync(Group body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> AddGroupAsync(Group body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get user group matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> GetUserGroupOfGroupAsync(string groupLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user group matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> GetUserGroupOfGroupAsync(string groupLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete user group matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupAsync(string groupLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user group matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteGroupAsync(string groupLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get parent groups of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> GetGroupParentGroupsAsync(string groupLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get parent groups of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> GetGroupParentGroupsAsync(string groupLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update parent groups of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> SetGroupParentGroupsAsync(string groupLocator, Groups body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update parent groups of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> SetGroupParentGroupsAsync(string groupLocator, Groups body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get properties of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetGroupPropertiesAsync(string groupLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get properties of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetGroupPropertiesAsync(string groupLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a property of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetGroupPropertyAsync(string groupLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a property of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetGroupPropertyAsync(string groupLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a property of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetGroupPropertyAsync(string groupLocator, string name, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a property of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetGroupPropertyAsync(string groupLocator, string name, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a property of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveGroupPropertyAsync(string groupLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a property of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveGroupPropertyAsync(string groupLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all roles of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> GetGroupRolesAsync(string groupLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all roles of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> GetGroupRolesAsync(string groupLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a role to the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleToGroupAsync(string groupLocator, Role body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a role to the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleToGroupAsync(string groupLocator, Role body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update roles of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> SetGroupRolesAsync(string groupLocator, Roles body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update roles of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> SetGroupRolesAsync(string groupLocator, Roles body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a role with the specific scope of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetGroupRoleAtScopeAsync(string groupLocator, string roleId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a role with the specific scope of the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetGroupRoleAtScopeAsync(string groupLocator, string roleId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a role with the specific scope to the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleAtScopeToGroupAsync(string groupLocator, string roleId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a role with the specific scope to the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleAtScopeToGroupAsync(string groupLocator, string roleId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a role with the specific scope from the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRoleAtScopeFromGroupAsync(string groupLocator, string roleId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a role with the specific scope from the matching user group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRoleAtScopeFromGroupAsync(string groupLocator, string roleId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all users.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Users> GetAllUsersAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all users.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Users> GetAllUsersAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> AddUserAsync(User body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> AddUserAsync(User body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get user matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(string userLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(string userLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update user matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> ReplaceUserAsync(string userLocator, User body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update user matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> ReplaceUserAsync(string userLocator, User body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete user matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(string userLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(string userLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove the RememberMe data of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserRememberMeAsync(string userLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the RememberMe data of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserRememberMeAsync(string userLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all groups of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> GetAllUserGroupsAsync(string userLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all groups of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> GetAllUserGroupsAsync(string userLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update groups of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> SetUserGroupsAsync(string userLocator, Groups body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update groups of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Groups> SetUserGroupsAsync(string userLocator, Groups body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a user group of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> GetUserGroupAsync(string userLocator, string groupLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a user group of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> GetUserGroupAsync(string userLocator, string groupLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove the matching user from the specific group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserFromGroupAsync(string userLocator, string groupLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the matching user from the specific group.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserFromGroupAsync(string userLocator, string groupLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all permissions effective for the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionAssignments> GetUserPermissionsAsync(string userLocator, string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all permissions effective for the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionAssignments> GetUserPermissionsAsync(string userLocator, string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all properties of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetUserPropertiesAsync(string userLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all properties of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetUserPropertiesAsync(string userLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetUserPropertyAsync(string userLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetUserPropertyAsync(string userLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetUserPropertyAsync(string userLocator, string name, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetUserPropertyAsync(string userLocator, string name, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserPropertyAsync(string userLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserPropertyAsync(string userLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all user roles of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> GetAllUserRolesAsync(string userLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all user roles of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> GetAllUserRolesAsync(string userLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a role to the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleToUserAsync(string userLocator, Role body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a role to the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleToUserAsync(string userLocator, Role body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update user roles of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> SetUserRolesAsync(string userLocator, Roles body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update user roles of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Roles> SetUserRolesAsync(string userLocator, Roles body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a user role with the specific scope from the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetUserRolesAtScopeAsync(string userLocator, string roleId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a user role with the specific scope from the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> GetUserRolesAtScopeAsync(string userLocator, string roleId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a role with the specific scope to the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleToUserAtScopeAsync(string userLocator, string roleId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a role with the specific scope to the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Role> AddRoleToUserAtScopeAsync(string userLocator, string roleId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a role with the specific scope from the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserRoleAtScopeAsync(string userLocator, string roleId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a role with the specific scope from the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserRoleAtScopeAsync(string userLocator, string roleId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all authentication tokens of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tokens> GetUserTokensAsync(string userLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all authentication tokens of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Tokens> GetUserTokensAsync(string userLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new authentication token for the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Token> AddUserTokenAsync(Token body, string userLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new authentication token for the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Token> AddUserTokenAsync(Token body, string userLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove an authentication token from the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserTokenAsync(string userLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an authentication token from the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserTokenAsync(string userLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetUserFieldAsync(string userLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetUserFieldAsync(string userLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a field of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetUserFieldAsync(string userLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a field of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetUserFieldAsync(string userLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserFieldAsync(string userLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a property of the matching user.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserFieldAsync(string userLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all VCS root instances.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> GetAllVcsRootInstancesAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all VCS root instances.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> GetAllVcsRootInstancesAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check for the pending changes for all VCS root instances.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> RequestPendingChangesCheckAsync(string locator, string requestor, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check for the pending changes for all VCS root instances.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> RequestPendingChangesCheckAsync(string locator, string requestor, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Send the commit hook notification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TriggerCommitHookNotificationAsync(string locator, bool? okOnNothingFound);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send the commit hook notification.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TriggerCommitHookNotificationAsync(string locator, bool? okOnNothingFound, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get VCS root instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstance> GetVcsRootInstanceAsync(string vcsRootInstanceLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get VCS root instance matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstance> GetVcsRootInstanceAsync(string vcsRootInstanceLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListAsync(string basePath, string locator, string fields, string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all files.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListAsync(string basePath, string locator, string fields, string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileAsync(string path, string basePath, string locator, string name, string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get specific file zipped.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetZippedFileAsync(string path, string basePath, string locator, string name, string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileAsync(string path, string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadFileAsync(string path, string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataAsync(string path, string fields, string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get metadata of specific file.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileMetadataAsync(string path, string fields, string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathAsync(string path, string basePath, string locator, string fields, string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List files under this path.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Files> GetFilesListForSubpathAsync(string path, string basePath, string locator, string fields, string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all properties of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetVcsRootInstancePropertiesAsync(string vcsRootInstanceLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all properties of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetVcsRootInstancePropertiesAsync(string vcsRootInstanceLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the repository state of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Entries> GetVcsRootInstanceRepositoryStateAsync(string vcsRootInstanceLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the repository state of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Entries> GetVcsRootInstanceRepositoryStateAsync(string vcsRootInstanceLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the repository state of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Entries> SetVcsRootInstanceRepositoryStateAsync(string vcsRootInstanceLocator, Entries body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the repository state of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Entries> SetVcsRootInstanceRepositoryStateAsync(string vcsRootInstanceLocator, Entries body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete the last repository state of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootInstanceRepositoryStateAsync(string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the last repository state of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootInstanceRepositoryStateAsync(string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the creation date of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootInstanceCreationDateAsync(string vcsRootInstanceLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the creation date of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootInstanceCreationDateAsync(string vcsRootInstanceLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootInstanceFieldAsync(string vcsRootInstanceLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootInstanceFieldAsync(string vcsRootInstanceLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVcsRootInstanceFieldAsync(string vcsRootInstanceLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVcsRootInstanceFieldAsync(string vcsRootInstanceLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove a field of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootInstanceFieldAsync(string vcsRootInstanceLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a field of the matching VCS root instance.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootInstanceFieldAsync(string vcsRootInstanceLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all VCS roots.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRoots> GetAllVcsRootsAsync(string locator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all VCS roots.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRoots> GetAllVcsRootsAsync(string locator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a new VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRoot> AddVcsRootAsync(VcsRoot body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRoot> AddVcsRootAsync(VcsRoot body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get root endpoints.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRoot> GetRootEndpointsAsync(string vcsRootLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get root endpoints.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRoot> GetRootEndpointsAsync(string vcsRootLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove VCS root matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootAsync(string vcsRootLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove VCS root matching the locator.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootAsync(string vcsRootLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all VCS root instances of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> GetVcsRootInstancesAsync(string vcsRootLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all VCS root instances of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcsRootInstances> GetVcsRootInstancesAsync(string vcsRootLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all properties of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetAllVcsRootPropertiesAsync(string vcsRootLocator, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all properties of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> GetAllVcsRootPropertiesAsync(string vcsRootLocator, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update all properties of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> SetVcsRootPropertiesAsync(string vcsRootLocator, Properties body, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update all properties of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Properties> SetVcsRootPropertiesAsync(string vcsRootLocator, Properties body, string fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete all properties of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllVcsRootPropertiesAsync(string vcsRootLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all properties of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllVcsRootPropertiesAsync(string vcsRootLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a property on the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootPropertyAsync(string vcsRootLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a property on the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootPropertyAsync(string vcsRootLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a property of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVcsRootPropertyAsync(string vcsRootLocator, string name, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a property of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVcsRootPropertyAsync(string vcsRootLocator, string name, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a property of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootPropertyAsync(string vcsRootLocator, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a property of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcsRootPropertyAsync(string vcsRootLocator, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the settings file of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootSettingsFileAsync(string vcsRootLocator);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the settings file of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootSettingsFileAsync(string vcsRootLocator, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a field of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootFieldAsync(string vcsRootLocator, string field);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a field of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVcsRootFieldAsync(string vcsRootLocator, string field, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a field of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVcsRootFieldAsync(string vcsRootLocator, string field, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a field of the matching VCS root.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SetVcsRootFieldAsync(string vcsRootLocator, string field, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the TeamCity server version.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVersionAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the TeamCity server version.
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVersionAsync(System.Threading.CancellationToken cancellationToken);

    }

    /// <summary>
    /// Represents a locator string for filtering Agent entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentLocator
    {
        /// <summary>
        /// Is the agent authorized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Authorized { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// Compatible build types locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compatible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Compatible { get; set; }

        /// <summary>
        /// Is the agent connected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connected { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Is the agent enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// Agent pool locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pool { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering AgentPool entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentPoolLocator
    {
        /// <summary>
        /// Agent pool id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("$singleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SingleValue { get; set; }

        /// <summary>
        /// Pool's associated agents locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Agent pool id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        /// <summary>
        /// Agent pool name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Pool's associated projects locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering AgentType entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentTypeLocator
    {
        /// <summary>
        /// id of the AgentType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("$singleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingleValue { get; set; }

        /// <summary>
        /// AgentType of the given agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// id of the AgentType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactDownloadInfo
    {
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("downloadTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadTimestamp { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering AuditEvent entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditLocator
    {
        /// <summary>
        /// Use `$help` to get the full list of supported actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        /// <summary>
        /// Related project locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Related build type or template locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("systemAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemAction { get; set; }

        /// <summary>
        /// Locator of user who caused the audit event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthModule
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthModules
    {
        [Newtonsoft.Json.JsonProperty("module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AuthModule> Module { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Branch entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BranchLocator
    {
        /// <summary>
        /// Is feature branch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branched { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// Is default branch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Default { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BranchLocatorPolicy? Policy { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Build entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Agent locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// typeId of agent used to execute build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgentTypeId { get; set; }

        /// <summary>
        /// State can be any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("any", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Any { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactDependency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactDependency { get; set; }

        /// <summary>
        /// Branch locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// Is canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Canceled { get; set; }

        /// <summary>
        /// Agent locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compatibleAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompatibleAgent { get; set; }

        /// <summary>
        /// Is composite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Composite { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// If true, applies default filter which returns only "normal" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations)).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultFilter { get; set; }

        /// <summary>
        /// Is failed to start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failedToStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FailedToStart { get; set; }

        /// <summary>
        /// Requires either date or build dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finishDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinishDate { get; set; }

        /// <summary>
        /// Is finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Finished { get; set; }

        /// <summary>
        /// Is hanging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hanging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hanging { get; set; }

        /// <summary>
        /// Is history build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? History { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// Build number string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// Is a personal build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Personal { get; set; }

        /// <summary>
        /// Is pinned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pinned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pinned { get; set; }

        /// <summary>
        /// Project (direct parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildLocatorProperty? Property { get; set; }

        /// <summary>
        /// Is queued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Queued { get; set; }

        /// <summary>
        /// Requires either date or build dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueuedDate { get; set; }

        /// <summary>
        /// Build revision.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Revision { get; set; }

        /// <summary>
        /// Is running.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotDependency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotDependency { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        /// <summary>
        /// Requires either date or build dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildLocatorState? State { get; set; }

        /// <summary>
        /// Status text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Tag locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// ID of a build or build promotion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaskId { get; set; }

        /// <summary>
        /// For personal builds checks the owner of the build, triggerring user in other cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Build entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildQueueLocator
    {
        /// <summary>
        /// Agent locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Is personal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Personal { get; set; }

        /// <summary>
        /// Agent pool locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pool { get; set; }

        /// <summary>
        /// Project locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        /// <summary>
        /// Deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        /// <summary>
        /// User locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

    }

    /// <summary>
    /// Send instances of this class to the `/app/rest/builds/&lt;locator&gt;/status` endpoint to change the status of a build to either 'SUCCESS' or 'FAILURE'. This replicates the *Mark as failed...* and *Mark as successful...* operations available from the 'Actions' menu on the build results page in TeamCity UI.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildStatusUpdate
    {
        /// <summary>
        /// Set to either 'FAILURE' or 'SUCCESS'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Your custom note that explains why the build status was manually changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

    }

    /// <summary>
    /// Represents build customization settings of a trigger
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildTriggerCustomization
    {
        [Newtonsoft.Json.JsonProperty("enforceCleanCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnforceCleanCheckout { get; set; }

        [Newtonsoft.Json.JsonProperty("enforceCleanCheckoutForDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnforceCleanCheckoutForDependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Parameters { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering BuildType entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildTypeLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Is paused.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paused", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Paused { get; set; }

        /// <summary>
        /// Project (direct parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        /// <summary>
        /// Base template locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>
        /// Is a template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TemplateFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        /// <summary>
        /// VCS root locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRoot { get; set; }

        /// <summary>
        /// VCS root instance locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsRootInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRootInstance { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Change entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Commit SHA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalVersion { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Is pending.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pending { get; set; }

        /// <summary>
        /// Project locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// Commit SHA since which the changes should be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sinceChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SinceChange { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        /// <summary>
        /// User locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        /// <summary>
        /// VCS side username.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// VCS root locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRoot { get; set; }

        /// <summary>
        /// VCS instance locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsRootInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRootInstance { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

    }

    /// <summary>
    /// Aggregated statuses of the first builds with this change. Fairly expensive to compute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeStatus
    {
        [Newtonsoft.Json.JsonProperty("runningSuccessfullyBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunningSuccessfullyBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("pendingBuildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PendingBuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("successfulBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SuccessfulBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("totalProblems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalProblems { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailedTests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewFailedTests { get; set; }

        [Newtonsoft.Json.JsonProperty("otherFailedTests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OtherFailedTests { get; set; }

        [Newtonsoft.Json.JsonProperty("queuedBuildsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QueuedBuildsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("criticalBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds CriticalBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("notCriticalBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds NotCriticalBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("newTestsFailedBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds NewTestsFailedBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("compilationErrorBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds CompilationErrorBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("finishedBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinishedBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("runningBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunningBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("failedBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FailedBuilds { get; set; }

        [Newtonsoft.Json.JsonProperty("cancelledBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CancelledBuilds { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering CloudImage entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudImageLocator
    {
        /// <summary>
        /// Projects where the cloud profiles/images are accessible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Agent locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// Agent pool locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentPool { get; set; }

        /// <summary>
        /// Build promotion locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compatibleBuildPromotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompatibleBuildPromotion { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compatibleBuildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompatibleBuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Image id as provided by list images call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Cloud instance locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Image name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Cloud profile locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profile { get; set; }

        /// <summary>
        /// Projects defining the cloud profiles/images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering CloudInstance entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudInstanceLocator
    {
        /// <summary>
        /// Projects where the cloud profiles/images are accessible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Agent running on an instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Instance id as provided by list instances call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Cloud image corresponding to an instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// Instance network address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// Cloud profile of an instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profile { get; set; }

        /// <summary>
        /// Project defining the cloud profiles/images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering CloudProfile entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudProfileLocator
    {
        /// <summary>
        /// Projects where the cloud profiles are accessible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Profile cloud provider id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloudProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudProviderId { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Profile id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Cloud image which belongs to a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// Cloud instance which belongs to a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Projects defining the cloud profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering DeploymentDashboard entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentDashboardLocator
    {
        /// <summary>
        /// Projects where the deployment dashboards are accessible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Dashboard id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Dashboard name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Projects defining the deployment dashboards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentHistory
    {
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentStateEntry CurrentState { get; set; }

        [Newtonsoft.Json.JsonProperty("states", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeploymentStateEntry> States { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering DeploymentInstance entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentInstanceLocator
    {
        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Current state of deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentInstanceLocatorCurrentState? CurrentState { get; set; }

        /// <summary>
        /// Deployment dashboard locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dashboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dashboard { get; set; }

        /// <summary>
        /// Dashboard id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentStateEntry
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentStateEntryState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("buildId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BuildId { get; set; }

        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

    }

    /// <summary>
    /// Represents the specific file change (in the scope of the commit).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileChange
    {
        [Newtonsoft.Json.JsonProperty("before-revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeforeRevision { get; set; }

        [Newtonsoft.Json.JsonProperty("after-revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AfterRevision { get; set; }

        [Newtonsoft.Json.JsonProperty("changeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangeType { get; set; }

        [Newtonsoft.Json.JsonProperty("changeTypeComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangeTypeComment { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File { get; set; }

        [Newtonsoft.Json.JsonProperty("relative-file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelativeFile { get; set; }

        [Newtonsoft.Json.JsonProperty("directory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Directory { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Investigation entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvestigationLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// User locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }

        /// <summary>
        /// Project (direct parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignmentProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentProject { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Problem locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("problem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Problem { get; set; }

        /// <summary>
        /// User locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reporter { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvestigationLocatorResolution? Resolution { get; set; }

        /// <summary>
        /// yyyyMMddTHHmmss+ZZZZ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sinceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SinceDate { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvestigationLocatorState? State { get; set; }

        /// <summary>
        /// Test locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Test { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvestigationLocatorType? Type { get; set; }

    }

    /// <summary>
    /// Represents an issue related to the specific change.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Issue
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Represents a relation between the issue and the Changes entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssueUsage
    {
        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Changes Changes { get; set; }

        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Issue Issue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabeledValue
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatrixConfiguration
    {
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatrixBuildFeatureDescriptor Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatrixDependencies Dependencies { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatrixDependencies
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("dependency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MatrixDependency> Dependency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatrixDependency
    {
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entries Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatrixParameterDescriptor
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LabeledValue> Value { get; set; }

        [Newtonsoft.Json.JsonProperty("valueCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ValueCount { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Mute entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MuteLocator
    {
        /// <summary>
        /// Project affected by the mutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Mute creation time, yyyyMMddTHHmmss+ZZZZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        /// <summary>
        /// Internal mute id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        /// <summary>
        /// Problem for which mute is assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("problem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Problem { get; set; }

        /// <summary>
        /// Project in which mute is assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// User who muted this test/problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reporter { get; set; }

        /// <summary>
        /// Unmute condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MuteLocatorResolution? Resolution { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

        /// <summary>
        /// test for which mute is assigned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Test { get; set; }

        /// <summary>
        /// What is muted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MuteLocatorType? Type { get; set; }

        /// <summary>
        /// Automatic unmute time, yyyyMMddTHHmmss+ZZZZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unmuteDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UnmuteDate { get; set; }

    }

    /// <summary>
    /// Represents test metadata (package, method, class, and so on).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParsedTestName
    {
        [Newtonsoft.Json.JsonProperty("testPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestPackage { get; set; }

        [Newtonsoft.Json.JsonProperty("testSuite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestSuite { get; set; }

        [Newtonsoft.Json.JsonProperty("testClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestClass { get; set; }

        [Newtonsoft.Json.JsonProperty("testShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("testNameWithoutPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestNameWithoutPrefix { get; set; }

        [Newtonsoft.Json.JsonProperty("testMethodName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestMethodName { get; set; }

        [Newtonsoft.Json.JsonProperty("testNameWithParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestNameWithParameters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Permission> Permission { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Problem entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Is currently failing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyFailing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyFailing { get; set; }

        /// <summary>
        /// Is currently investigated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyInvestigated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyInvestigated { get; set; }

        /// <summary>
        /// Is currently muted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyMuted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyMuted { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering ProblemOccurrence entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemOccurrenceLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Is currently failing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyFailing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyFailing { get; set; }

        /// <summary>
        /// Is currently investigated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyInvestigated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyInvestigated { get; set; }

        /// <summary>
        /// Is currently muted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyMuted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyMuted { get; set; }

        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// Has ever been muted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Muted { get; set; }

        [Newtonsoft.Json.JsonProperty("problem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Problem { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Represents an investigation scope.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemScope
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes BuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType BuildType { get; set; }

    }

    /// <summary>
    /// Represents an investigation target.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemTarget
    {
        [Newtonsoft.Json.JsonProperty("anyProblem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnyProblem { get; set; }

        [Newtonsoft.Json.JsonProperty("tests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tests Tests { get; set; }

        [Newtonsoft.Json.JsonProperty("problems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Problems Problems { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Project entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Is archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Default template locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultTemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Associated agent pool locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pool { get; set; }

        /// <summary>
        /// Project (direct parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// Project feature locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectFeature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectFeature { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        /// <summary>
        /// VCS root locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRoot { get; set; }

        /// <summary>
        /// Is virtual (default=false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Virtual { get; set; }

    }

    /// <summary>
    /// Represents an investigation resolution timestamp and details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resolution
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResolutionType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

    }

    /// <summary>
    /// Represents a revision related to a VCS change.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Revision
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("internalVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsBranchName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsBranchName { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root-instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRootInstance VcsRootInstance { get; set; }

        [Newtonsoft.Json.JsonProperty("checkout-rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CheckoutRules { get; set; }

    }

    /// <summary>
    /// Represents a list of Revision entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Revisions
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Revision> Revision { get; set; }

        [Newtonsoft.Json.JsonProperty("failOnMissingRevisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FailOnMissingRevisions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotDependencyLink
    {
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType BuildType { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypeBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildTypeBranch { get; set; }

    }

    /// <summary>
    /// Represents a project state field (as of now, limited to the read-only state of project).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StateField
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Value { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Tag entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagLocator
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Private { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Node entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamCityNodeLocator
    {
        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Test entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Is currently failing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyFailing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyFailing { get; set; }

        /// <summary>
        /// Is currently investigated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyInvestigated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyInvestigated { get; set; }

        /// <summary>
        /// Is currently muted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyMuted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyMuted { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// Build type locator (for finding out if this test is affected by mutes in build type).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muteAffected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MuteAffected { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering TestOccurrence entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestOccurrenceLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Is currently failing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyFailing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyFailing { get; set; }

        /// <summary>
        /// Is currently investigated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentlyInvestigated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyInvestigated { get; set; }

        [Newtonsoft.Json.JsonProperty("currentlyMuted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentlyMuted { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Is ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ignored { get; set; }

        [Newtonsoft.Json.JsonProperty("includePersonal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludePersonal { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// Is muted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Muted { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewFailure { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TestOccurrenceLocatorStatus? Status { get; set; }

        /// <summary>
        /// Test locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Test { get; set; }

    }

    /// <summary>
    /// Identifies the authority that triggered this build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriggeredBy
    {
        /// <summary>
        /// Returns the following values depending on the authority that triggered this build: 
        /// <br/>
        /// <br/>* *user* if the build was triggered manually in TeamCity UI or via REST API.
        /// <br/>* *snapshotDependency* if the build is a part of a build chain and was requested by a downstream build configuration.
        /// <br/>* *vcs* if the build was initiated by the VCS Trigger that found new commits in the remote repository.
        /// <br/>* *schedule* if the build was initiated by the Schedule Trigger.
        /// <br/>* *finishBuild* if the build was initiated by the Finish Build Trigger.
        /// <br/>* *retry* if the build was initiated by the Retry Trigger that re-starts failed builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Optional details regarding the triggering event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        /// <summary>
        /// The timestamp of the build triggering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// The summary displayed next to the 'Triggered' line in TeamCity UI. Enumerates authorities that caused this build to run and displays the build's parent configuration name and number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayText { get; set; }

        /// <summary>
        /// The string representation of the `properties` array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rawValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawValue { get; set; }

        /// <summary>
        /// Identifies the user who initiated a build, directly or indirectly. Indirectly means they initiated another build that eventuated the current one (for example, started a dependent build or triggered a build that failed and was then restarted by the Retry Trigger). Builds initiated by the Schedule Trigger do not have a related user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        /// <summary>
        /// A separate build that caused this one to run. Can co-exist with the `user` field: for example, if a user triggered build A that requested (via a snapshot dependency) build B, the latter will have links to both the build A and the user who initiated it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

        /// <summary>
        /// The parent build configuration of the `build`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType BuildType { get; set; }

        /// <summary>
        /// The array of name-value pairs containing service information about the triggered build and the events that initiated it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    /// <summary>
    /// Represents a named set of predefined typed values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TypedValueSet
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Keyword { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LabeledValue> Value { get; set; }

        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering Group entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserGroupLocator
    {
        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering User entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserLocator
    {
        /// <summary>
        /// Username or 'current' for current user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("$singleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingleValue { get; set; }

        /// <summary>
        /// User group (direct or indirect parent) locator, includes the user considering group hierarchy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedGroup { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// User email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// User group (direct parent) locator, includes the user directly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// User id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        /// <summary>
        /// User's last login time formatted as 'yyyyMMddTHHmmss+ZZZZ'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastLogin { get; set; }

        /// <summary>
        /// User's display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        /// <summary>
        /// User's role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Start { get; set; }

        /// <summary>
        /// Username of a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

    }

    /// <summary>
    /// Represents the last known repository check status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsCheckStatus
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("requestorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorType { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering VcsRootInstance entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRootInstanceLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Build locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Build { get; set; }

        /// <summary>
        /// Build type locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildType { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        /// <summary>
        /// Project (direct parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VcsRootInstanceLocatorProperty? Property { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        /// <summary>
        /// Type of VCS (e.g. jetbrains.git).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// VCS root locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRoot { get; set; }

        /// <summary>
        /// Is used for versioned settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionedSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VersionedSettings { get; set; }

    }

    /// <summary>
    /// Represents a locator string for filtering VcsRoot entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRootLocator
    {
        /// <summary>
        /// Project (direct or indirect parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// For paginated calls, how many entities to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalId { get; set; }

        /// <summary>
        /// Supply multiple locators and return a union of the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Limit processing to the latest `&lt;lookupLimit&gt;` entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lookupLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LookupLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Project (direct parent) locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VcsRootLocatorProperty? Property { get; set; }

        /// <summary>
        /// For paginated calls, from which entity to start rendering the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        /// <summary>
        /// Type of VCS (e.g. jetbrains.git).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

    }

    /// <summary>
    /// Represents a known agent instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Agent
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("connected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connected { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("authorized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Authorized { get; set; }

        [Newtonsoft.Json.JsonProperty("uptodate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Uptodate { get; set; }

        [Newtonsoft.Json.JsonProperty("outdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Outdated { get; set; }

        [Newtonsoft.Json.JsonProperty("pluginsOutdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PluginsOutdated { get; set; }

        [Newtonsoft.Json.JsonProperty("javaOutdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaOutdated { get; set; }

        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AgentProtocol? Protocol { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("currentAgentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentAgentVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("lastActivityTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastActivityTime { get; set; }

        [Newtonsoft.Json.JsonProperty("idleSinceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdleSinceTime { get; set; }

        [Newtonsoft.Json.JsonProperty("disconnectionComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisconnectionComment { get; set; }

        [Newtonsoft.Json.JsonProperty("registrationTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host { get; set; }

        [Newtonsoft.Json.JsonProperty("cpuRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CpuRank { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("enabledInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnabledInfo EnabledInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizedInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizedInfo AuthorizedInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudInstance CloudInstance { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudImage CloudImage { get; set; }

        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Environment Environment { get; set; }

        [Newtonsoft.Json.JsonProperty("pool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentPool Pool { get; set; }

        [Newtonsoft.Json.JsonProperty("compatibilityPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompatibilityPolicy CompatibilityPolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("compatibleBuildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes CompatibleBuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("incompatibleBuildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Compatibilities IncompatibleBuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("builds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds Builds { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents a requirement to agent parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentRequirement
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    /// <summary>
    /// Represents a list of AgentRequirement entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentRequirements
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("agent-requirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AgentRequirement> AgentRequirement { get; set; }

    }

    /// <summary>
    /// Represents an agent pool instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentPool
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAgents { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project OwnerProject { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Projects Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agents Agents { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

        [Newtonsoft.Json.JsonProperty("agentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentTypes AgentTypes { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of AgentPool entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentPools
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("agentPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AgentPool> AgentPool { get; set; }

    }

    /// <summary>
    /// Represents an agent type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentType
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("buildParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties BuildParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("configurationParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties ConfigurationParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("availableParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties AvailableParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("isCloud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("systemParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties SystemParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties EnvironmentParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Environment Environment { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of AgentType entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentTypes
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("agentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AgentType> AgentType { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Agent entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Agents
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Agent> Agent { get; set; }

    }

    /// <summary>
    /// Represents approval status for this build, if applicable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApprovalInfo
    {
        [Newtonsoft.Json.JsonProperty("timeoutTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeoutTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("configurationValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConfigurationValid { get; set; }

        [Newtonsoft.Json.JsonProperty("canBeApprovedByCurrentUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanBeApprovedByCurrentUser { get; set; }

        [Newtonsoft.Json.JsonProperty("userApprovals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserApprovals UserApprovals { get; set; }

        [Newtonsoft.Json.JsonProperty("groupApprovals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupApprovals GroupApprovals { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApprovalInfoStatus? Status { get; set; }

    }

    /// <summary>
    /// Represents a list of ArtifactDependency entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactDependencies
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("artifact-dependency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArtifactDependency> ArtifactDependency { get; set; }

        [Newtonsoft.Json.JsonProperty("replace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Replace { get; set; }

    }

    /// <summary>
    /// Represents an artifact dependency relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactDependency
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("source-buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType SourceBuildType { get; set; }

    }

    /// <summary>
    /// Represents an audit action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditAction
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

    }

    /// <summary>
    /// Represents an audit event including a user and affected entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditEvent
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuditAction Action { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedEntities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelatedEntities RelatedEntities { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of AuditEvent entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditEvents
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("auditEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AuditEvent> AuditEvent { get; set; }

    }

    /// <summary>
    /// Represents agent authorization data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizedInfo
    {
        /// <summary>
        /// Returns *true* if the current object state is enabled (for example, pinned for build `PinInfo` or authorized for agent `AuthorizedInfo`; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }

        /// <summary>
        /// Contains detailed information about current `status` value: the time it was set, the user who did it, and their personal notes on the event.This timestamp and the user data are automatically generated and cannot be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

    }

    /// <summary>
    /// Represents a branch of the remote repository that stores sources processed by this build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Branch
    {
        /// <summary>
        /// A public branch name displayed in TeamCity UI. To get a full VCS name instead (for example, 'refs/heads/main'), read the *vcsBranchName* property of a nested Revision entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// An internal branch name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalName { get; set; }

        /// <summary>
        /// Returns **true** if this branch is the default branch of this build configuration; otherwise, **false**. When obtaining builds of the specific BuildType, add the *branch(default:any)* locator to get builds from all existing branches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }

        /// <summary>
        /// Returns **true** for unspecified branches; otherwise, **false**. A branch is labeled as unspecified when TeamCity fails to find a branch for this build. Such branches have a predefined '&lt;unspecified&gt;' name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unspecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unspecified { get; set; }

        /// <summary>
        /// Returns **true** for active branches and **false** for inactive ones. A branch is considered inactive if it had neither new TeamCity builds in the last 24 hours, nor recent VCS repository changes in the last 7 days. Learn more: [Active branches](https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html#Active+Branches).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the date and time of the last branch activity (the last TeamCity build or the latest VCS commit).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastActivity { get; set; }

        /// <summary>
        /// Returns **true** if the branch belongs to the automatically created 'My Branches' group; otherwise, **false**. Branch grouping allows TeamCity to automatically categorize branches based on current TeamCity user commits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupFlag { get; set; }

        /// <summary>
        /// Returns all builds that target this branch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("builds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds Builds { get; set; }

    }

    /// <summary>
    /// Represents a branch version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BranchVersion
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// A public branch name displayed in TeamCity UI. To get a full VCS name instead (for example, 'refs/heads/main'), read the *vcsBranchName* property of a nested Revision entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Returns **true** if this branch is the default branch of this build configuration; otherwise, **false**. When obtaining builds of the specific BuildType, add the *branch(default:any)* locator to get builds from all existing branches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }

        /// <summary>
        /// Returns **true** for active branches and **false** for inactive ones. A branch is considered inactive if it had neither new TeamCity builds in the last 24 hours, nor recent VCS repository changes in the last 7 days. Learn more: [Active branches](https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html#Active+Branches).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        /// <summary>
        /// An internal branch name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalName { get; set; }

        /// <summary>
        /// Returns **true** if the branch belongs to the automatically created 'My Branches' group; otherwise, **false**. Branch grouping allows TeamCity to automatically categorize branches based on current TeamCity user commits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupFlag { get; set; }

        /// <summary>
        /// Returns all builds that target this branch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("builds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds Builds { get; set; }

        /// <summary>
        /// Returns the date and time of the last branch activity (the last TeamCity build or the latest VCS commit).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastActivity { get; set; }

        /// <summary>
        /// Returns **true** for unspecified branches; otherwise, **false**. A branch is labeled as unspecified when TeamCity fails to find a branch for this build. Such branches have a predefined '&lt;unspecified&gt;' name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unspecified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unspecified { get; set; }

    }

    /// <summary>
    /// Represents a list of Branch entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Branches
    {
        /// <summary>
        /// The current number of Branch objects in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// The relative link (without the server URL) used to retrieve this object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        /// <summary>
        /// The list of branches owned by this collection that satisfy the given locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Branch> Branch { get; set; }

    }

    /// <summary>
    /// A process that performs a certain CI/CD job. Most builds comprise multiple sequential steps executing their own granular actions. A build is executed according to the settings specified in its build configuration (BuildType). 
    /// <br/>
    /// <br/>See the [Manage Builds](https://www.jetbrains.com/help/teamcity/rest/start-and-cancel-builds.html) section for the examples on various build actions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Build
    {
        /// <summary>
        /// The automatically generated unique ID of the build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TaskId { get; set; }

        /// <summary>
        /// Returns the ID of the corresponding build configuration. To obtain this configuration itself, use the *buildType* property instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildTypeId { get; set; }

        /// <summary>
        /// This property supports the internal infrastructure and is not intented to be used. Use the *buildTypeId* property instead to access the regular build configuration ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildTypeInternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildTypeInternalId { get; set; }

        /// <summary>
        /// Returns a public build number this build is assigned in its build configuration, *null* if a build is still queued, or *N/A* if a queued build was canceled before it started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// Returns whether a build has finished successfully (or is expected to finish so, if still running). Possible values: 
        /// <br/>
        /// <br/>* *null* for queued builds. 
        /// <br/>* *SUCCESS* for builds that have successfully finished or still running without errors. 
        /// <br/>* *FAILURE* for builds that failed to start or failed during their run. 
        /// <br/>* *UNKNOWN* for canceled builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the actual stage of the build's lifecycle: queued, running, or finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildState? State { get; set; }

        /// <summary>
        /// Returns *true* if the build is currently running; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; }

        /// <summary>
        /// Returns *true* if this is build is composite; otherwise, *false*.Composite builds aggregate results of multiple child builds. These builds can belong to [composite build configurations](https://www.jetbrains.com/help/teamcity/composite-build-configuration.html) or can be spawned automatically (for example, to aggregate results of parallel tests).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Composite { get; set; }

        /// <summary>
        /// Returns *true* if this build was automatically removed from the building queue (for example, if an error occured or the appointed reviewers failed to [approve the build](https://www.jetbrains.com/help/teamcity/cloud/build-approval.html) in time); otherwise, *false*.Does not return *true* for manually cancelled builds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failedToStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FailedToStart { get; set; }

        /// <summary>
        /// Returns *true* for [personal builds](https://www.jetbrains.com/help/teamcity/personal-build.html) and *false* for regular builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Personal { get; set; }

        /// <summary>
        /// This property is deprecated, see *running-info* property instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PercentageComplete { get; set; }

        /// <summary>
        /// Returns the name of the repository branch whose changes are processed in the current build. This property returns the [logical branch name](https://www.jetbrains.com/help/teamcity/working-with-feature-branches.html#Logical+Branch+Name) (*main*), not a fully specified VCS branch name (*refs/heads/main*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branchName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BranchName { get; set; }

        /// <summary>
        /// Returns *true* if the current build processes changes from the branch specified as default branch in VCS root settings; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultBranch { get; set; }

        /// <summary>
        /// Returns *true* if the branch name equals *&amp;lt;unspecified&amp;gt;*; otherwise, *false*. A branch can have this name if TeamCity fails to retrieve a valid branch name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unspecifiedBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnspecifiedBranch { get; set; }

        /// <summary>
        /// Returns *true* for [history builds](https://www.jetbrains.com/help/teamcity/history-build.html) that started after a build with most recent code changes; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? History { get; set; }

        /// <summary>
        /// Returns *true* if the build is currently [pinned](https://www.jetbrains.com/help/teamcity/build-actions.html#Pin+Build); otherwise, *false*.Send GET and PUT requests to */app/rest/builds/&lt;build-locator&gt;/pinInfo* to get the detailed information about pinned builds and manually pin/unpin these builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pinned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pinned { get; set; }

        /// <summary>
        /// Returns the shortened (without the server URL) link to the current build. To obtain the full URL, use the *webUrl* property instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        /// <summary>
        /// Returns the full web link to access this build. To get a link without the server URL, read the *href* property instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Returns the build's position in the building queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queuePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QueuePosition { get; set; }

        /// <summary>
        /// Returns the number of changes processed in this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limitedChangesCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LimitedChangesCount { get; set; }

        /// <summary>
        /// Returns the path to the built-in artifact storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artifactsDirectory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactsDirectory { get; set; }

        /// <summary>
        /// Returns the collection of links to this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        /// <summary>
        /// Returns the additional information about the finished or running build. Returns nothing if a build is still queued, read the *waitReason* property instead to get the current status of a queued build.In TeamCity UI, this string is displayed next to the build status icon ("Canceled", "Step 3/7", "Error while applying patch", and so on).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusText { get; set; }

        /// <summary>
        /// Returns the build configuration to which the current build belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType BuildType { get; set; }

        /// <summary>
        /// Returns the comment for this build, and the user who wrote it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

        /// <summary>
        /// Returns the collection of [tags](https://www.jetbrains.com/help/teamcity/build-actions.html#Add+Tags+to+Build) that decorate this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }

        /// <summary>
        /// Allows you to identify who and when pinned this build. Returns *null* for builds whose *pinned* is *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pinInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment PinInfo { get; set; }

        /// <summary>
        /// Returns the user associated with this personal build, or *null* of this build is not personal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        /// <summary>
        /// If this build is still queued, this property returns the estimated time (UTC) of an actual build start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startEstimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartEstimate { get; set; }

        /// <summary>
        /// Returns the actual reason why this build remains in build queue. This property returns the most recent wait reason from the *queuedWaitReasons* array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WaitReason { get; set; }

        /// <summary>
        /// Returns the estimated time this build will finish. Returns a value only for queued builds and *null* for those that already run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finishEstimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinishEstimate { get; set; }

        /// <summary>
        /// Returns the build that must finish before the currently queued build can start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delayedByBuild", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build DelayedByBuild { get; set; }

        /// <summary>
        /// Returns the agent that TeamCity currently expects to assign to this queued build. Use *compatibleAgents* instead to obtain the list of all agents that can run this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("plannedAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent PlannedAgent { get; set; }

        /// <summary>
        /// Allows you to identify who and when allowed this build to start. This information is written if a build configuration has the [Build Approval feature](https://www.jetbrains.com/help/teamcity/cloud/build-approval.html) configured and/or the project [Untrusted Builds](https://www.jetbrains.com/help/teamcity/untrusted-builds.html) settings filter out potentially harmful builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApprovalInfo ApprovalInfo { get; set; }

        /// <summary>
        /// Returns the RunningBuildInfo object that stores data related to the build completion stage: completion percentage, elapsed and remaining time, build health (hanging or running as expected), and so on.Returns *null* for queued and finished builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("running-info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProgressInfo RunningInfo { get; set; }

        /// <summary>
        /// Allows you to retrieve detailed information about this canceled build: a user who canceled it, their comment, and the cancel timestamp. Returns *null* for non-canceled builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canceledInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment CanceledInfo { get; set; }

        /// <summary>
        /// Returns the date and time (UTC) when this build was queued. Note that the moment this build actually starts is stored in the different property (*startDate*)..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueuedDate { get; set; }

        /// <summary>
        /// Returns the date and time (UTC) of the moment the build actually started. Note that the moment a build was triggered is stored in the *queuedDate* property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartDate { get; set; }

        /// <summary>
        /// Returns the date and time of the moment the build was removed from the queue (finished, failed, or was canceled). The value is in UTC and corresponds to the server timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finishDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinishDate { get; set; }

        /// <summary>
        /// Allows you to identify the time this build was triggered, and the authority that ussued the build command (user, vcs trigger, schedule trigger, and so on).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TriggeredBy Triggered { get; set; }

        /// <summary>
        /// Returns the topmost element of the *changes* collection. Corresponds to the latest change processed in this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Changes LastChanges { get; set; }

        /// <summary>
        /// Returns the list of changes processed in this build. Use *limitedChangesCount* to obtain the number of these changes, or *lastChanges* to get the latest one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Changes Changes { get; set; }

        /// <summary>
        /// Returns the list of revisions associated with this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Revisions Revisions { get; set; }

        /// <summary>
        /// Returns the revision of build configuration settings stored in a VCS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionedSettingsRevision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Revision VersionedSettingsRevision { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactDependencyChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildChanges ArtifactDependencyChanges { get; set; }

        /// <summary>
        /// Returns a build agent that processed (or currently processes) this build.If the build has not yet started and awaits in the build queue, this property returns *null*. In this case you can check the *plannedAgent* property to obtain the agent that will likely run the build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent Agent { get; set; }

        /// <summary>
        /// If a build is still in building queue, this property returns the list of all agents that can run it. Use *plannedAgent* to obtain an agent from this list that TeamCity expects to assign to this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compatibleAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agents CompatibleAgents { get; set; }

        /// <summary>
        /// Returns all [cloud images](https://www.jetbrains.com/help/teamcity/teamcity-integration-with-cloud-solutions.html) that can spawn agents compatible with this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compatibleCloudImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudImages CompatibleCloudImages { get; set; }

        /// <summary>
        /// Returns the TestOccurences object that stores information on test instances run in this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("testOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestOccurrences TestOccurrences { get; set; }

        /// <summary>
        /// Returns the list of build problems that led to the build failure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("problemOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProblemOccurrences ProblemOccurrences { get; set; }

        /// <summary>
        /// Returns the list of public build artifacts. See this section for the examples of downloading specific files: [Get Build Artifacts](https://www.jetbrains.com/help/teamcity/rest/manage-finished-builds.html#Get+Build+Artifacts).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artifacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Files Artifacts { get; set; }

        /// <summary>
        /// Returns the list of issues associated with changes processed in this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relatedIssues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuesUsages RelatedIssues { get; set; }

        /// <summary>
        /// Returns the collection of custom build properties (including those added by users in the Run Custom Build dialog) and their current values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        /// <summary>
        /// Returns the complete list of predefined and custom properties with their final values. Final values are those reported by a build agent after a build finishes. These include values changed during a build and via the Run Custom Build dialog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultingProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties ResultingProperties { get; set; }

        /// <summary>
        /// Returns the collection of user-defined properties and their original values. Original values are those stored in the build configuration and assigned to any new build that runs with default settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties OriginalProperties { get; set; }

        /// <summary>
        /// Returns the complete list of predefined and custom properties with their starting values. Starting values are those reported by a build agent when a build actually starts. These are a combination of original values (see *originalProperties*) for properties that were not modified, and custom values for properties edited via the Run Custom Build dialog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties StartProperties { get; set; }

        /// <summary>
        /// Returns the list of Entries owned by this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entries Attributes { get; set; }

        /// <summary>
        /// Returns the list of statistical metrics for the current build (*ArtifactsSize*, *BuildDuration*, *SuccessRate*, *TimeSpentInQueue*, and so on).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Statistics { get; set; }

        /// <summary>
        /// Returns the metadata associated with this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datas Metadata { get; set; }

        /// <summary>
        /// Returns all upstream builds on which the current build depends. In the BuildA — BuildB — BuildC chain, this property returns:&lt;br&gt;&lt;br&gt;* empty array for BuildA;
        /// <br/>
        /// <br/>* array with BuildA for BuildB;
        /// <br/>* array with BuildA and BuildB for BuildC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshot-dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds SnapshotDependencies { get; set; }

        /// <summary>
        /// Returns all upstream builds whose artifacts were exported to this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artifact-dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds ArtifactDependencies { get; set; }

        /// <summary>
        /// Allows you to override artifact dependencies specified in Build Configuration settings and specify custom dependencies for this specific build. See this section for the sample payload: [Manage Dependencies](https://www.jetbrains.com/help/teamcity/rest/manage-build-configuration-details.html#Manage+Dependencies).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom-artifact-dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArtifactDependencies CustomArtifactDependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("settingsHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingsHash { get; set; }

        [Newtonsoft.Json.JsonProperty("currentSettingsHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentSettingsHash { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModificationId { get; set; }

        [Newtonsoft.Json.JsonProperty("chainModificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChainModificationId { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Items ReplacementIds { get; set; }

        [Newtonsoft.Json.JsonProperty("related", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Related Related { get; set; }

        /// <summary>
        /// Allows you to define custom triggering options (for example, whether the build should get the top spot in the build queue or force clean its sources).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggeringOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTriggeringOptions TriggeringOptions { get; set; }

        /// <summary>
        /// Returns *true* if at least one dependent build has [reused this build](https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html#Suitable+Builds) instead of triggering a new one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usedByOtherBuilds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UsedByOtherBuilds { get; set; }

        /// <summary>
        /// Returns the Comment object that stores information about user who changed the status of this build, and their notes regarding this change.This property may be deprecated in future API versions, use *...Info* properties (*approvalInfo*, *canceledInfo*, and so on) instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusChangeComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment StatusChangeComment { get; set; }

        /// <summary>
        /// Returns a list of [labels](https://www.jetbrains.com/help/teamcity/vcs-labeling.html) that tag sources of this particular build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VcsLabel> VcsLabels { get; set; }

        /// <summary>
        /// Returns *true*, if running build no longer [occupies a build agent](https://www.jetbrains.com/help/teamcity/detaching-build-from-agent.html); otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detachedFromAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DetachedFromAgent { get; set; }

        /// <summary>
        /// Similar to the *finishDate* property, but adjusts the date and time according to the agent timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finishOnAgentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinishOnAgentDate { get; set; }

        /// <summary>
        /// Returns *true* if the build is running with non-default parameter, dependency, and (or) changes settings (for example, reuses the manually selected build or targets the specific changes revision instead of building latest changes); otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Customized { get; set; }

        /// <summary>
        /// Returns the list of settings that differentiate this build from a default build of the same build configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customizations Customization { get; set; }

        /// <summary>
        /// Returns *true* if the build is currently collecting changes from a remote repository; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changesCollectingInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChangesCollectingInProgress { get; set; }

        /// <summary>
        /// Returns all reasons why this build remains queued. Use *waitReason* to obtain the primary reason displayed in TeamCity UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queuedWaitReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties QueuedWaitReasons { get; set; }

        /// <summary>
        /// Returns the collection metadata objects associated with artifacts that were downloaded from dependencies of this build, or exported to builds dependent of the current one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadedArtifacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DownloadedArtifacts DownloadedArtifacts { get; set; }

        /// <summary>
        /// Specifies whether this build belongs to a [Matrix builds](https://www.jetbrains.com/help/teamcity/matrix-build.html) configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matrixConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatrixConfiguration MatrixConfiguration { get; set; }

        /// <summary>
        /// For history builds (builds whose *history* property is *true*), returns the most recent finished build that processed the same revision of the source code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstBuildWithSameChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build FirstBuildWithSameChanges { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Send a POST request with this object as a payload to cancel a queued (the `/app/rest/buildQueue/&lt;queuedBuildLocator&gt;` endpoint)or already running (the `/app/rest/builds/&lt;buildLocator&gt;` endpoint) build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildCancelRequest
    {
        /// <summary>
        /// A note that explains why this build was canceled. This note will be written to the canceled build's `build.canceledInfo.text` property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// If *true*, a new identical build will be queued as soon as the current build is canceled. If *false*, a build will simply be canceled. Similarly to TeamCity UI, the option to re-queue a build is only available if this build is already running. Builds that are still queued can be only aborted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readdIntoQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReaddIntoQueue { get; set; }

    }

    /// <summary>
    /// Represents links to the next or previous build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildChange
    {
        [Newtonsoft.Json.JsonProperty("nextBuild", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build NextBuild { get; set; }

        [Newtonsoft.Json.JsonProperty("prevBuild", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build PrevBuild { get; set; }

    }

    /// <summary>
    /// Represents a list of BuildChange entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildChanges
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("buildChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BuildChange> BuildChange { get; set; }

    }

    /// <summary>
    /// Contains build dependency and queue and dependency settings available in the [Run Custom Build](https://www.jetbrains.com/help/teamcity/running-custom-build.html) dialog in TeamCity UI. Assign an instance of this class to the Build.TriggeringOptions field when sending POST requests to the `/app/rest/buildQueue` endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildTriggeringOptions
    {
        /// <summary>
        /// Returns *true* if the agent should clear its build checkout directory and pull all sources anew; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cleanSources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CleanSources { get; set; }

        /// <summary>
        /// Returns *true* if the current 'cleanSources' behavior also be applied to all snapshot dependency builds, otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cleanSourcesInAllDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CleanSourcesInAllDependencies { get; set; }

        /// <summary>
        /// Use *true* to prevent the build from reusing any of its snapshot dependency builds and re-run all dependency configurations; *false* to let TeamCity decide which snapshot builds should be re-run and which have [suitable builds]()https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html#Suitable+Builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rebuildAllDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RebuildAllDependencies { get; set; }

        /// <summary>
        /// *true* to re-run all failed, failed to start, and canceled snapshot dependency builds; *false* to let TeamCity decide which snapshot builds should be re-run and which have [suitable builds]()https://www.jetbrains.com/help/teamcity/snapshot-dependencies.html#Suitable+Builds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rebuildFailedOrIncompleteDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RebuildFailedOrIncompleteDependencies { get; set; }

        /// <summary>
        /// *true* to place the build at the top spot of the build queue, *false* to let TeamCity automatically process this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queueAtTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? QueueAtTop { get; set; }

        /// <summary>
        /// Use *true* to collect all code commits and versioned settings right away; *false* to do this when build is assigned to the agent and is ready to start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freezeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreezeSettings { get; set; }

        /// <summary>
        /// Use *true* to label all dependency builds with tags specified in the `Build.Tags` field; *false* to label the current build only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tagDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TagDependencies { get; set; }

        /// <summary>
        /// The list of snapshot dependencies that should be rebuilt. Should only be used when both `rebuildAllDependencies` and `rebuildFailedOrIncompleteDependencies` fields equal *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rebuildDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes RebuildDependencies { get; set; }

    }

    /// <summary>
    /// Represents a build configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildType
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("templateFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TemplateFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildTypeType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("paused", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Paused { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("projectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectInternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectInternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes Templates { get; set; }

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType Template { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root-entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRootEntries VcsRootEntries { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Steps Steps { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Features Features { get; set; }

        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Triggers Triggers { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshot-dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnapshotDependencies SnapshotDependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("artifact-dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArtifactDependencies ArtifactDependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("agent-requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentRequirements AgentRequirements { get; set; }

        [Newtonsoft.Json.JsonProperty("branches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Branches Branches { get; set; }

        [Newtonsoft.Json.JsonProperty("builds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds Builds { get; set; }

        [Newtonsoft.Json.JsonProperty("investigations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Investigations Investigations { get; set; }

        [Newtonsoft.Json.JsonProperty("compatibleAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agents CompatibleAgents { get; set; }

        [Newtonsoft.Json.JsonProperty("compatibleCloudImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudImages CompatibleCloudImages { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRootInstances VcsRootInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("externalStatusAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalStatusAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("pauseComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment PauseComment { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of BuildType entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildTypes
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BuildType> BuildType { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Build entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Builds
    {
        /// <summary>
        /// The current number of Build objects in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// The list of builds owned by this collection that satisfy the given locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Build> Build { get; set; }

        /// <summary>
        /// The relative link (without the server URL) used to retrieve this object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        /// <summary>
        /// If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the next batch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        /// <summary>
        /// If the list of returned entities exceeds the request `count` value, TeamCity splits it into multiple batches. This property returns the endpoint that allows you to obtain the previous batch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

    }

    /// <summary>
    /// Represents a VCS change (commit).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("internalVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        [Newtonsoft.Json.JsonProperty("registrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("personal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Personal { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshotDependencyLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnapshotDependencyLink SnapshotDependencyLink { get; set; }

        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileChanges Files { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRootInstance VcsRootInstance { get; set; }

        [Newtonsoft.Json.JsonProperty("parentChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Changes ParentChanges { get; set; }

        [Newtonsoft.Json.JsonProperty("parentRevisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Items ParentRevisions { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("storesProjectSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StoresProjectSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("commiter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commiter Commiter { get; set; }

        [Newtonsoft.Json.JsonProperty("canEditComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanEditComment { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Change entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Change> Change { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

    }

    /// <summary>
    /// Clean-up Settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cleanup
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("maxCleanupDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxCleanupDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("daily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Daily Daily { get; set; }

        [Newtonsoft.Json.JsonProperty("cron", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cron Cron { get; set; }

    }

    /// <summary>
    /// Represents a cloud instance image saved with a profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudImage
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudProfile Profile { get; set; }

        [Newtonsoft.Json.JsonProperty("instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudInstances Instances { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("agentTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgentTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("agentPoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgentPoolId { get; set; }

        [Newtonsoft.Json.JsonProperty("operatingSystemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperatingSystemName { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of CloudImage entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudImages
    {
        [Newtonsoft.Json.JsonProperty("cloudImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CloudImage> CloudImage { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

    }

    /// <summary>
    /// Represents a running cloud instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudInstance
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("networkAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudImage Image { get; set; }

        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent Agent { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of CloudInstance entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudInstances
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CloudInstance> CloudInstance { get; set; }

    }

    /// <summary>
    /// Represents a cloud agent profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudProfile
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudImages Images { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of CloudProfile entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudProfiles
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CloudProfile> CloudProfile { get; set; }

    }

    /// <summary>
    /// Represents a dated comment of the specific user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comment
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

    }

    /// <summary>
    /// Represents a commiter to a VCS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commiter
    {
        [Newtonsoft.Json.JsonProperty("vcsUsername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Users Users { get; set; }

    }

    /// <summary>
    /// Represents a list of Compatibility entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Compatibilities
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("compatibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Compatibility> Compatibility { get; set; }

    }

    /// <summary>
    /// Represents a compatibility relation between the agent and build configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Compatibility
    {
        [Newtonsoft.Json.JsonProperty("compatible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Compatible { get; set; }

        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent Agent { get; set; }

        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType BuildType { get; set; }

        [Newtonsoft.Json.JsonProperty("unmetRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Requirements UnmetRequirements { get; set; }

    }

    /// <summary>
    /// Represents a build configuration run policy and included build configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityPolicy
    {
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Policy { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes BuildTypes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cron
    {
        [Newtonsoft.Json.JsonProperty("minute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Minute { get; set; }

        [Newtonsoft.Json.JsonProperty("hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hour { get; set; }

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Day { get; set; }

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Month { get; set; }

        [Newtonsoft.Json.JsonProperty("dayWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DayWeek { get; set; }

    }

    /// <summary>
    /// Represents build customizations (artifact dependency overrides, custom parameters or changesets).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customizations
    {
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Changes { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ArtifactDependencies { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Daily
    {
        [Newtonsoft.Json.JsonProperty("hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hour { get; set; }

        [Newtonsoft.Json.JsonProperty("minute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minute { get; set; }

    }

    /// <summary>
    /// Represents a list of MetaData entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Datas
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetaData> Data { get; set; }

    }

    /// <summary>
    /// Represents a deployment dashboard instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentDashboard
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentInstances DeploymentInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of DeploymentDashboard entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentDashboards
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentDashboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeploymentDashboard> DeploymentDashboard { get; set; }

    }

    /// <summary>
    /// Represents an instance that has been deployed to external system, along with deployment history.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentInstance
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentInstanceCurrentState? CurrentState { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentStateEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentStateEntries DeploymentStateEntries { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentDashboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentDashboard DeploymentDashboard { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of DeploymentInstance entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentInstances
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeploymentInstance> DeploymentInstance { get; set; }

    }

    /// <summary>
    /// Represents a list of DeploymentStateEntry entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentStateEntries
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("historyFromPosted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentHistory HistoryFromPosted { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentStateEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<deploymentStateEntry> DeploymentStateEntry { get; set; }

    }

    /// <summary>
    /// Represents a state of deployment instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deploymentStateEntry
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public deploymentStateEntryState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("entryFromPosted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentStateEntry EntryFromPosted { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

    }

    /// <summary>
    /// Represents a set of responsibilities that are currently disabled but can be enabled on a TeamCity node.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisabledResponsibilities
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("responsibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Responsibility> Responsibility { get; set; }

    }

    /// <summary>
    /// List of metadata on artifacts downloaded from [or provided by] a build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownloadInfo
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArtifactDownloadInfo> ArtifactInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

    }

    /// <summary>
    /// Collection of artifacts metadata which were downloaded from dependencies of this build or delivered to ones depending on this build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownloadedArtifacts
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("unfilteredCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnfilteredCount { get; set; }

        [Newtonsoft.Json.JsonProperty("downloadInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DownloadInfo> DownloadInfo { get; set; }

    }

    /// <summary>
    /// Represents a set of effective responsibilities of a TeamCity node. A responsibility becomes effective once it is enabled in the server configuration and a responsible node detects this change and updates its state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EffectiveResponsibilities
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("responsibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Responsibility> Responsibility { get; set; }

    }

    /// <summary>
    /// Represents the current enablement status of the agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnabledInfo
    {
        /// <summary>
        /// Returns *true* if the current object state is enabled (for example, pinned for build `PinInfo` or authorized for agent `AuthorizedInfo`; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }

        /// <summary>
        /// Contains detailed information about current `status` value: the time it was set, the user who did it, and their personal notes on the event.This timestamp and the user data are automatically generated and cannot be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("statusSwitchTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusSwitchTime { get; set; }

    }

    /// <summary>
    /// Represents a set of enabled responsibilities of a TeamCity node.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnabledResponsibilities
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("responsibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Responsibility> Responsibility { get; set; }

    }

    /// <summary>
    /// Represents a list of Entry entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entries
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Entry> Entry { get; set; }

    }

    /// <summary>
    /// Represents a single name-value relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entry
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Represents the details of the agent's OS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Environment
    {
        [Newtonsoft.Json.JsonProperty("osType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OsType { get; set; }

        [Newtonsoft.Json.JsonProperty("osName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OsName { get; set; }

    }

    /// <summary>
    /// Represents a build feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Feature
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    /// <summary>
    /// Represents a list of Feature entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Features
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("feature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Feature> Feature { get; set; }

    }

    /// <summary>
    /// Represents a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class File
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModificationTime { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public File Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Content { get; set; }

        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Files Children { get; set; }

    }

    /// <summary>
    /// Represents a list of FileChange entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileChanges
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileChange> File { get; set; }

    }

    /// <summary>
    /// Represents a list of File entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Files
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<File> File { get; set; }

    }

    /// <summary>
    /// Represents a user group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Group
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("parent-groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Groups ParentGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("child-groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Groups ChildGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Users Users { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roles Roles { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    /// <summary>
    /// Represents group approval rule and its current status for the given build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupApprovalRule
    {
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Group Group { get; set; }

        [Newtonsoft.Json.JsonProperty("requiredApprovalsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RequiredApprovalsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("currentlyApprovedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Users CurrentlyApprovedBy { get; set; }

    }

    /// <summary>
    /// Represents a list of GroupApprovalRule entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupApprovals
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("groupApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupApprovalRule> GroupApproval { get; set; }

    }

    /// <summary>
    /// Represents a list of Group entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Groups
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Group> Group { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of HealthCategory entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthCategories
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("healthCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HealthCategory> HealthCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthCategory
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("helpUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HelpUrl { get; set; }

    }

    /// <summary>
    /// Represents a server health item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthItem
    {
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HealthItemSeverity? Severity { get; set; }

        [Newtonsoft.Json.JsonProperty("healthCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HealthCategory HealthCategory { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of HealthItem entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthStatusItems
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("healthItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HealthItem> HealthItem { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

    }

    /// <summary>
    /// Represents a href link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Href
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href1 { get; set; }

    }

    /// <summary>
    /// Represents an investigation of a build problem.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Investigation
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvestigationState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Assignee { get; set; }

        [Newtonsoft.Json.JsonProperty("assignment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Assignment { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProblemScope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProblemTarget Target { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resolution Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("responsible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Responsible { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Investigation entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Investigations
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("investigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Investigation> Investigation { get; set; }

    }

    /// <summary>
    /// Represents a list of Issue entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Issues
    {
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issue> Issues1 { get; set; }

    }

    /// <summary>
    /// Represents a list of IssueUsage entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuesUsages
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("issueUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueUsage> IssueUsage { get; set; }

    }

    /// <summary>
    /// Represents a list of items (strings).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items
    {
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Item { get; set; }

    }

    /// <summary>
    /// Represents a license key details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseKey
    {
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Valid { get; set; }

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [Newtonsoft.Json.JsonProperty("expired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Expired { get; set; }

        [Newtonsoft.Json.JsonProperty("obsolete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Obsolete { get; set; }

        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("maintenanceEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaintenanceEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicenseKeyType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("servers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Servers { get; set; }

        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Agents { get; set; }

        [Newtonsoft.Json.JsonProperty("unlimitedAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnlimitedAgents { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("unlimitedBuildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnlimitedBuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("rawType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawType { get; set; }

    }

    /// <summary>
    /// Represents a list of LicenseKey entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseKeys
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("licenseKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LicenseKey> LicenseKey { get; set; }

    }

    /// <summary>
    /// Represents license state details (available build configurations, agents, etc.).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicensingData
    {
        [Newtonsoft.Json.JsonProperty("licenseUseExceeded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LicenseUseExceeded { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAgents { get; set; }

        [Newtonsoft.Json.JsonProperty("unlimitedAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnlimitedAgents { get; set; }

        [Newtonsoft.Json.JsonProperty("maxBuildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxBuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("unlimitedBuildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnlimitedBuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypesLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuildTypesLeft { get; set; }

        [Newtonsoft.Json.JsonProperty("serverLicenseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicensingDataServerLicenseType? ServerLicenseType { get; set; }

        [Newtonsoft.Json.JsonProperty("serverEffectiveReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerEffectiveReleaseDate { get; set; }

        [Newtonsoft.Json.JsonProperty("agentsLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgentsLeft { get; set; }

        [Newtonsoft.Json.JsonProperty("licenseKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseKeys LicenseKeys { get; set; }

    }

    /// <summary>
    /// Represents a list of URLs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Link
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("relativeUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelativeUrl { get; set; }

    }

    /// <summary>
    /// Represents a list of Link entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Link> Link { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatrixBuildFeatureDescriptor
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MatrixParameterDescriptor> Parameter { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Represents a named Entries entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaData
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entries Entries { get; set; }

    }

    /// <summary>
    /// Represents the specific server metric.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metric
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("prometheusName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrometheusName { get; set; }

        [Newtonsoft.Json.JsonProperty("metricValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetricValues MetricValues { get; set; }

        [Newtonsoft.Json.JsonProperty("metricTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetricTags MetricTags { get; set; }

    }

    /// <summary>
    /// Represents a metric tag.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricTag
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Represents a list of MetricTag entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricTags
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("metricTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetricTag> MetricTag { get; set; }

    }

    /// <summary>
    /// Represents a metric value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricValue
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetricTags Tags { get; set; }

    }

    /// <summary>
    /// Represents a list of MetricValue entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricValues
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("metricValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetricValue> MetricValue { get; set; }

    }

    /// <summary>
    /// Represents a list of Metric entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metrics
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Metric> Metric { get; set; }

    }

    /// <summary>
    /// Represents a list of OperationResult entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultipleOperationResult
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("errorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCount { get; set; }

        [Newtonsoft.Json.JsonProperty("operationResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationResult> OperationResult { get; set; }

    }

    /// <summary>
    /// Represents a muted test.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mute
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("assignment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Assignment { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProblemScope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProblemTarget Target { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resolution Resolution { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Mute entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mutes
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("mute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Mute> Mute { get; set; }

    }

    /// <summary>
    /// Represents a build configuration stub.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewBuildTypeDescription
    {
        [Newtonsoft.Json.JsonProperty("copyAllAssociatedSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopyAllAssociatedSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("projectsIdsMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties ProjectsIdsMap { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypesIdsMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties BuildTypesIdsMap { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootsIdsMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties VcsRootsIdsMap { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceBuildTypeLocator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceBuildTypeLocator { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceBuildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType SourceBuildType { get; set; }

    }

    /// <summary>
    /// Represents a project stub.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewProjectDescription
    {
        [Newtonsoft.Json.JsonProperty("copyAllAssociatedSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopyAllAssociatedSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("projectsIdsMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties ProjectsIdsMap { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypesIdsMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties BuildTypesIdsMap { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootsIdsMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties VcsRootsIdsMap { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceProjectLocator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceProjectLocator { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project SourceProject { get; set; }

        [Newtonsoft.Json.JsonProperty("parentProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project ParentProject { get; set; }

    }

    /// <summary>
    /// Represents a TeamCity node.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Node
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Current { get; set; }

        [Newtonsoft.Json.JsonProperty("enabledResponsibilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnabledResponsibilities EnabledResponsibilities { get; set; }

        [Newtonsoft.Json.JsonProperty("disabledResponsibilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisabledResponsibilities DisabledResponsibilities { get; set; }

        [Newtonsoft.Json.JsonProperty("effectiveResponsibilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EffectiveResponsibilities EffectiveResponsibilities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("node", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Node> Node { get; set; }

    }

    /// <summary>
    /// Represents a relation between a message and a related entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationResult
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("related", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelatedEntity Related { get; set; }

    }

    /// <summary>
    /// Represents a permission.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permission
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Global { get; set; }

    }

    /// <summary>
    /// Represents a relation between the specific permission and a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionAssignment
    {
        [Newtonsoft.Json.JsonProperty("isGlobalScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGlobalScope { get; set; }

        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Permission Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

    }

    /// <summary>
    /// Represents a list of PermissionAssignment entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionAssignments
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("permissionAssignment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionAssignment> PermissionAssignment { get; set; }

    }

    /// <summary>
    /// Represents permission restrictions of an authentication token.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionRestriction
    {
        [Newtonsoft.Json.JsonProperty("isGlobalScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGlobalScope { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Permission Permission { get; set; }

    }

    /// <summary>
    /// Represents a list of PermissionRestriction entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionRestrictions
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("permissionRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionRestriction> PermissionRestriction { get; set; }

    }

    /// <summary>
    /// Specifies whether the build is pinned. Send PUT requests to the `/app/rest/builds/BUILD_LOCATOR/pinInfo` endpoint to pin or unpin builds.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PinInfo
    {
        /// <summary>
        /// Returns *true* if the current object state is enabled (for example, pinned for build `PinInfo` or authorized for agent `AuthorizedInfo`; otherwise, *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }

        /// <summary>
        /// Contains detailed information about current `status` value: the time it was set, the user who did it, and their personal notes on the event.This timestamp and the user data are automatically generated and cannot be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

    }

    /// <summary>
    /// Represents a plugin.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Plugin
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("loadPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadPath { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Parameters { get; set; }

    }

    /// <summary>
    /// Represents a list of Plugin entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Plugins
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("plugin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Plugin> Plugin { get; set; }

    }

    /// <summary>
    /// Represents an issue with the test.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Problem
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("mutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mutes Mutes { get; set; }

        [Newtonsoft.Json.JsonProperty("investigations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Investigations Investigations { get; set; }

        [Newtonsoft.Json.JsonProperty("problemOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProblemOccurrences ProblemOccurrences { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents an instance of a failed test in the specific build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemOccurrence
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Muted { get; set; }

        [Newtonsoft.Json.JsonProperty("currentlyInvestigated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyInvestigated { get; set; }

        [Newtonsoft.Json.JsonProperty("currentlyMuted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyMuted { get; set; }

        [Newtonsoft.Json.JsonProperty("logAnchor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogAnchor { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NewFailure { get; set; }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalData { get; set; }

        [Newtonsoft.Json.JsonProperty("problem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Problem Problem { get; set; }

        [Newtonsoft.Json.JsonProperty("mute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mute Mute { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of ProblemOccurrence entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemOccurrences
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("problemOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProblemOccurrence> ProblemOccurrence { get; set; }

        [Newtonsoft.Json.JsonProperty("passed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Passed { get; set; }

        [Newtonsoft.Json.JsonProperty("failed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Failed { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewFailed { get; set; }

        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ignored { get; set; }

        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Muted { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Problem entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Problems
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("problem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Problem> Problem { get; set; }

    }

    /// <summary>
    /// An object that stores the latest information about a currently running build. Returns an empty object for finished and queued builds.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProgressInfo
    {
        /// <summary>
        /// The current completion rate (in percents).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PercentageComplete { get; set; }

        /// <summary>
        /// Time (in seconds) passed since the build actually started. Does not include time spent in queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ElapsedSeconds { get; set; }

        /// <summary>
        /// The currently estimated build duration (in seconds). The sum of `elapsedSeconds`, `leftSeconds`, and post-build activity duration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedTotalSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EstimatedTotalSeconds { get; set; }

        /// <summary>
        /// The estimated remaining build time (in seconds)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leftSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LeftSeconds { get; set; }

        /// <summary>
        /// The description of the currently performed build stage. Combines the build status with the latest build log message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentStageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentStageText { get; set; }

        /// <summary>
        /// Returns *true* for [history builds](https://www.jetbrains.com/help/teamcity/history-build.html). Builds are labeled as outdated (history) if there are finished non-personal builds that processed newer (or same) changes as in this build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Outdated { get; set; }

        /// <summary>
        /// Returns *true* if the server suspects this build is hanging. Builds are considered hung when their run duration exceeds the estimates and the build sends no new messages for some time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probablyHanging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProbablyHanging { get; set; }

        /// <summary>
        /// The timestamp of the latest build log message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastActivityTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastActivityTime { get; set; }

        /// <summary>
        /// Returns the first non-outdated build that processed the same changes as this outdated (history) build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outdatedReasonBuild", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build OutdatedReasonBuild { get; set; }

    }

    /// <summary>
    /// Represents a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Project
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parentProjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentProjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("parentProjectInternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentProjectInternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("parentProjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentProjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archived { get; set; }

        [Newtonsoft.Json.JsonProperty("virtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Virtual { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("parentProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project ParentProject { get; set; }

        [Newtonsoft.Json.JsonProperty("readOnlyUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StateField ReadOnlyUI { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType DefaultTemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("buildTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes BuildTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTypes Templates { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentDashboards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentDashboards DeploymentDashboards { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRoots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRoots VcsRoots { get; set; }

        [Newtonsoft.Json.JsonProperty("projectFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectFeatures ProjectFeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Projects Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudProfiles CloudProfiles { get; set; }

        [Newtonsoft.Json.JsonProperty("ancestorProjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Projects AncestorProjects { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents a project feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectFeature
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    /// <summary>
    /// Represents a list of ProjectFeature entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectFeatures
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("projectFeature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectFeature> ProjectFeature { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Project entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Projects
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Project> Project { get; set; }

    }

    /// <summary>
    /// Represents a list of Property entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties
    {
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Property { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

    }

    /// <summary>
    /// Represents a name-value-type relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Property
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type Type { get; set; }

    }

    /// <summary>
    /// Represents a link to the Builds entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Related
    {
        [Newtonsoft.Json.JsonProperty("builds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Builds Builds { get; set; }

    }

    /// <summary>
    /// Represents a list of RelatedEntity entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelatedEntities
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RelatedEntity> Entity { get; set; }

    }

    /// <summary>
    /// Represents a related entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelatedEntity
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("unknown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unknown { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

        [Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType BuildType { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Group Group { get; set; }

        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Test Test { get; set; }

        [Newtonsoft.Json.JsonProperty("problem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Problem Problem { get; set; }

        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent Agent { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRoot VcsRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Change Change { get; set; }

        [Newtonsoft.Json.JsonProperty("agentPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentPool AgentPool { get; set; }

    }

    /// <summary>
    /// Represents the list of the repository Branch entities with their recent revisions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepositoryState
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BranchVersion> Branch { get; set; }

    }

    /// <summary>
    /// Represents a list of unmet requirements of a build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Requirements
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Represents a single responsibility of a TeamCity node.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Responsibility
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Represents a user/group role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

    }

    /// <summary>
    /// Represents a list of Role entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roles
    {
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Role> Role { get; set; }

    }

    /// <summary>
    /// Represents various details of this server including the installation version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Server
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("versionMajor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionMajor { get; set; }

        [Newtonsoft.Json.JsonProperty("versionMinor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionMinor { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("currentTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentTime { get; set; }

        [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("buildDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildDate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRoots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href VcsRoots { get; set; }

        [Newtonsoft.Json.JsonProperty("builds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Builds { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Users { get; set; }

        [Newtonsoft.Json.JsonProperty("userGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href UserGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Agents { get; set; }

        [Newtonsoft.Json.JsonProperty("buildQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href BuildQueue { get; set; }

        [Newtonsoft.Json.JsonProperty("agentPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href AgentPools { get; set; }

        [Newtonsoft.Json.JsonProperty("investigations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Investigations { get; set; }

        [Newtonsoft.Json.JsonProperty("mutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Mutes { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactsUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Nodes { get; set; }

    }

    /// <summary>
    /// Authentication Settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerAuthSettings
    {
        [Newtonsoft.Json.JsonProperty("allowGuest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowGuest { get; set; }

        [Newtonsoft.Json.JsonProperty("guestUsername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GuestUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("welcomeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WelcomeText { get; set; }

        [Newtonsoft.Json.JsonProperty("collapseLoginForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CollapseLoginForm { get; set; }

        [Newtonsoft.Json.JsonProperty("perProjectPermissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerProjectPermissions { get; set; }

        [Newtonsoft.Json.JsonProperty("emailVerification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmailVerification { get; set; }

        [Newtonsoft.Json.JsonProperty("modules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthModules Modules { get; set; }

    }

    /// <summary>
    /// Global Server Settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerGlobalSettings
    {
        [Newtonsoft.Json.JsonProperty("rootUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("encryptionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncryptionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactDirectories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactDirectories { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultExecutionTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultExecutionTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultQuietPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultQuietPeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactsUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("maxArtifactsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxArtifactsNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("maxArtifactSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxArtifactSize { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultVCSCheckInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultVCSCheckInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("enforceDefaultVCSCheckInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnforceDefaultVCSCheckInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("useEncryption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseEncryption { get; set; }

        [Newtonsoft.Json.JsonProperty("artifactsDomainIsolation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ArtifactsDomainIsolation { get; set; }

    }

    /// <summary>
    /// Represents a list of SnapshotDependency entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotDependencies
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("snapshot-dependency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SnapshotDependency> SnapshotDependency { get; set; }

    }

    /// <summary>
    /// Represents a snapshot dependency relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotDependency
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("source-buildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildType SourceBuildType { get; set; }

    }

    /// <summary>
    /// Represents a build step.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Step
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

    }

    /// <summary>
    /// Represents a list of Step entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Steps
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("step", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Step> Step { get; set; }

    }

    /// <summary>
    /// A single build tag. To remove a specific tag from a build, send a PUT request to the `/app/rest/builds/BUILD_LOCATOR?locator=name:NAME` endpoint with an empty `name` value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag
    {
        /// <summary>
        /// The public tag name visible in TeamCity UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Private { get; set; }

    }

    /// <summary>
    /// Represents a list of Tag entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tags
    {
        /// <summary>
        /// The current number of Tag objects in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// The list of tags owned by this collection that satisfy the given locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tag> Tag { get; set; }

    }

    /// <summary>
    /// Represents a test.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Test
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("mutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mutes Mutes { get; set; }

        [Newtonsoft.Json.JsonProperty("investigations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Investigations Investigations { get; set; }

        [Newtonsoft.Json.JsonProperty("testOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestOccurrences TestOccurrences { get; set; }

        [Newtonsoft.Json.JsonProperty("parsedTestName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParsedTestName ParsedTestName { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

    }

    /// <summary>
    /// Represents a test results counter (how many times this test was successful/failed/muted/ignored).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestCounters
    {
        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ignored { get; set; }

        [Newtonsoft.Json.JsonProperty("failed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Failed { get; set; }

        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Muted { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Success { get; set; }

        [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? All { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewFailed { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Duration { get; set; }

    }

    /// <summary>
    /// Represents a relation between a test and the specific build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestOccurrence
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TestOccurrenceStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ignored { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("runOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RunOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NewFailure { get; set; }

        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Muted { get; set; }

        [Newtonsoft.Json.JsonProperty("currentlyMuted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyMuted { get; set; }

        [Newtonsoft.Json.JsonProperty("currentlyInvestigated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentlyInvestigated { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IgnoreDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Test Test { get; set; }

        [Newtonsoft.Json.JsonProperty("mute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mute Mute { get; set; }

        [Newtonsoft.Json.JsonProperty("build", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Build Build { get; set; }

        [Newtonsoft.Json.JsonProperty("firstFailed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestOccurrence FirstFailed { get; set; }

        [Newtonsoft.Json.JsonProperty("nextFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestOccurrence NextFixed { get; set; }

        [Newtonsoft.Json.JsonProperty("invocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestOccurrences Invocations { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestRunMetadata Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("logAnchor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogAnchor { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of TestOccurrence entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestOccurrences
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("testOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TestOccurrence> TestOccurrence { get; set; }

        [Newtonsoft.Json.JsonProperty("testCounters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestCounters TestCounters { get; set; }

        [Newtonsoft.Json.JsonProperty("ignored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ignored { get; set; }

        [Newtonsoft.Json.JsonProperty("failed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Failed { get; set; }

        [Newtonsoft.Json.JsonProperty("passed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Passed { get; set; }

        [Newtonsoft.Json.JsonProperty("newFailed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewFailed { get; set; }

        [Newtonsoft.Json.JsonProperty("muted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Muted { get; set; }

    }

    /// <summary>
    /// Represents a list of TypedValue entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestRunMetadata
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("typedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TypedValue> TypedValues { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of Test entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tests
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("myTestCounters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TestCounters MyTestCounters { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Test> Test { get; set; }

    }

    /// <summary>
    /// Represents an authentication token.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Token
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("creationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationTime { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("expirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationTime { get; set; }

        [Newtonsoft.Json.JsonProperty("permissionRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionRestrictions PermissionRestrictions { get; set; }

    }

    /// <summary>
    /// Represents a list of Token entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tokens
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Token> Token { get; set; }

    }

    /// <summary>
    /// Represents a build trigger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trigger
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("buildCustomization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildTriggerCustomization BuildCustomization { get; set; }

    }

    /// <summary>
    /// Represents a list of Trigger entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Triggers
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("trigger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Trigger> Trigger { get; set; }

    }

    /// <summary>
    /// Represents a build parameter type string.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type
    {
        [Newtonsoft.Json.JsonProperty("rawValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawValue { get; set; }

    }

    /// <summary>
    /// Represents a name-value-type relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TypedValue
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// List of TypedValueSets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TypedValueSets
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("valueSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TypedValueSet> ValueSet { get; set; }

    }

    /// <summary>
    /// Represents a user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastLogin { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("hasPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("realm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Realm { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roles Roles { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Groups Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

        [Newtonsoft.Json.JsonProperty("avatars", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAvatars Avatars { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled2FA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled2FA { get; set; }

    }

    /// <summary>
    /// Represents user approval rule and its current status for the given build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserApprovalRule
    {
        [Newtonsoft.Json.JsonProperty("approved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Approved { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

    }

    /// <summary>
    /// Represents a list of UserApprovalRule entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserApprovals
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("userApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserApprovalRule> UserApproval { get; set; }

    }

    /// <summary>
    /// Represents a group of links to the user's avatars
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAvatars
    {
        [Newtonsoft.Json.JsonProperty("urlToSize20", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize20 { get; set; }

        [Newtonsoft.Json.JsonProperty("urlToSize28", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize28 { get; set; }

        [Newtonsoft.Json.JsonProperty("urlToSize32", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize32 { get; set; }

        [Newtonsoft.Json.JsonProperty("urlToSize40", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize40 { get; set; }

        [Newtonsoft.Json.JsonProperty("urlToSize56", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize56 { get; set; }

        [Newtonsoft.Json.JsonProperty("urlToSize64", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize64 { get; set; }

        [Newtonsoft.Json.JsonProperty("urlToSize80", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlToSize80 { get; set; }

    }

    /// <summary>
    /// Represents a list of User entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Users
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> User { get; set; }

    }

    /// <summary>
    /// Represents a VCS root.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRoot
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsName { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationCheckInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModificationCheckInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRootInstances VcsRootInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryIdStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Items RepositoryIdStrings { get; set; }

        [Newtonsoft.Json.JsonProperty("locator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locator { get; set; }

        [Newtonsoft.Json.JsonProperty("projectLocator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectLocator { get; set; }

    }

    /// <summary>
    /// Represents a list of VcsRootEntry entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRootEntries
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root-entry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VcsRootEntry> VcsRootEntry { get; set; }

    }

    /// <summary>
    /// Represents a VCS root assigned to this build configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRootEntry
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRoot VcsRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("checkout-rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CheckoutRules { get; set; }

    }

    /// <summary>
    /// Represents a relation between a VCS root and unique settings set for this root.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRootInstance
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root-id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRootId { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootInternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRootInternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsName { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationCheckInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModificationCheckInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("commitHookMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CommitHookMode { get; set; }

        [Newtonsoft.Json.JsonProperty("lastVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("lastVersionInternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastVersionInternal { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRoot VcsRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepositoryState RepositoryState { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("repositoryIdStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Items RepositoryIdStrings { get; set; }

        [Newtonsoft.Json.JsonProperty("projectLocator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectLocator { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of VcsRootInstance entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRootInstances
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root-instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VcsRootInstance> VcsRootInstance { get; set; }

    }

    /// <summary>
    /// Represents a paginated list of VcsRoot entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsRoots
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("nextHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHref { get; set; }

        [Newtonsoft.Json.JsonProperty("prevHref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrevHref { get; set; }

        [Newtonsoft.Json.JsonProperty("vcs-root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VcsRoot> VcsRoot { get; set; }

    }

    /// <summary>
    /// The VCS-side tag that labels sources of this build.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsLabel
    {
        /// <summary>
        /// The public VCS tag name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// The reason why the sources could not be labeled. Provides additional information why the `status` field returns FAILED.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failureReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FailureReason { get; set; }

        /// <summary>
        /// The status of the labeling (tagging) operation. Possible values: 
        /// <br/>
        /// <br/>* *UNKNOWN* — the operation status is currently unknown.
        /// <br/>* *SUCCESSFUL_SET* — the sources were successfully tagged.
        /// <br/>* *IS_BEING_SET* — the labeling (tagging) process is currently ongoing.
        /// <br/>* *FAILED* — the sources could not be labeled.
        /// <br/>* *DISABLED_FOR_THE_ROOT* — the current root is excluded from the labeling process.
        /// <br/>* *LABELING_NOT_SUPPORTED* — VCS does not support labeling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VcsLabelStatus? Status { get; set; }

        /// <summary>
        /// The internal ID of the build during which the sources were tagged.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BuildId { get; set; }

        /// <summary>
        /// The instance of a VCS root that was used during the tagging process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcs-root-instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsRootInstance VcsRootInstance { get; set; }

    }

    /// <summary>
    /// Represents a list of VcsLabel entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsLabels
    {
        /// <summary>
        /// The current number of VcsLabel objects in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// The list of VcsLabels owned by this collection that satisfy the given locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vcsLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VcsLabel> VcsLabel { get; set; }

    }

    /// <summary>
    /// Represents links to the last or previous VCS root check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcsStatus
    {
        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsCheckStatus Current { get; set; }

        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VcsCheckStatus Previous { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Config.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsConfig
    {
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("showSettingsChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowSettingsChanges { get; set; }

        [Newtonsoft.Json.JsonProperty("vcsRootId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcsRootId { get; set; }

        [Newtonsoft.Json.JsonProperty("buildSettingsMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionedSettingsConfigBuildSettingsMode? BuildSettingsMode { get; set; }

        [Newtonsoft.Json.JsonProperty("settingsPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingsPath { get; set; }

        [Newtonsoft.Json.JsonProperty("synchronizationMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionedSettingsConfigSynchronizationMode? SynchronizationMode { get; set; }

        [Newtonsoft.Json.JsonProperty("storeSecureValuesOutsideVcs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StoreSecureValuesOutsideVcs { get; set; }

        [Newtonsoft.Json.JsonProperty("importDecision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionedSettingsConfigImportDecision? ImportDecision { get; set; }

        [Newtonsoft.Json.JsonProperty("portableDsl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PortableDsl { get; set; }

        [Newtonsoft.Json.JsonProperty("allowUIEditing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowUIEditing { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Context Parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsContextParameter
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Context Parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsContextParameters
    {
        [Newtonsoft.Json.JsonProperty("versionedSettingsContextParameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VersionedSettingsContextParameter> VersionedSettingsContextParameter { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsError
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File { get; set; }

        [Newtonsoft.Json.JsonProperty("stackTraceLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StackTraceLines { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsStatus
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionedSettingsStatusType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("missingContextParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MissingContextParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("dslOutdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DslOutdated { get; set; }

        [Newtonsoft.Json.JsonProperty("versionedSettingsError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VersionedSettingsError> VersionedSettingsError { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Token.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsToken
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Represents a Versioned Settings Tokens.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedSettingsTokens
    {
        [Newtonsoft.Json.JsonProperty("versionedSettingsToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VersionedSettingsToken> VersionedSettingsToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BranchLocatorPolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VCS_BRANCHES")]
        VCS_BRANCHES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_VCS_BRANCHES")]
        ACTIVE_VCS_BRANCHES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HISTORY_BRANCHES")]
        HISTORY_BRANCHES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_HISTORY_BRANCHES")]
        ACTIVE_HISTORY_BRANCHES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES")]
        ACTIVE_HISTORY_AND_ACTIVE_VCS_BRANCHES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BRANCHES")]
        ALL_BRANCHES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BuildLocatorProperty
    {

        [System.Runtime.Serialization.EnumMember(Value = @"exists")]
        Exists = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"not-exists")]
        NotExists = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"equals")]
        Equals = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-equal")]
        DoesNotEqual = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"starts-with")]
        StartsWith = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"contains")]
        Contains = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-contain")]
        DoesNotContain = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ends-with")]
        EndsWith = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"matches")]
        Matches = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-match")]
        DoesNotMatch = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"more-than")]
        MoreThan = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"no-more-than")]
        NoMoreThan = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"less-than")]
        LessThan = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"no-less-than")]
        NoLessThan = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-more-than")]
        VerMoreThan = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-no-more-than")]
        VerNoMoreThan = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-less-than")]
        VerLessThan = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-no-less-than")]
        VerNoLessThan = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BuildLocatorState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"queued")]
        Queued = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"running")]
        Running = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"finished")]
        Finished = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeploymentInstanceLocatorCurrentState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"successful")]
        Successful = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeploymentStateEntryState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESSFUL")]
        SUCCESSFUL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvestigationLocatorResolution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manually")]
        Manually = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"when_fixed")]
        When_fixed = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvestigationLocatorState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"taken")]
        Taken = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"given_up")]
        Given_up = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvestigationLocatorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"anyProblem")]
        AnyProblem = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"problem")]
        Problem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MuteLocatorResolution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manually")]
        Manually = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"whenfixed")]
        Whenfixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"attime")]
        Attime = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MuteLocatorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"problem")]
        Problem = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResolutionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manually")]
        Manually = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"whenFixed")]
        WhenFixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"atTime")]
        AtTime = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestOccurrenceLocatorStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"failure")]
        Failure = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VcsRootInstanceLocatorProperty
    {

        [System.Runtime.Serialization.EnumMember(Value = @"exists")]
        Exists = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"not-exists")]
        NotExists = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"equals")]
        Equals = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-equal")]
        DoesNotEqual = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"starts-with")]
        StartsWith = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"contains")]
        Contains = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-contain")]
        DoesNotContain = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ends-with")]
        EndsWith = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"matches")]
        Matches = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-match")]
        DoesNotMatch = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"more-than")]
        MoreThan = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"no-more-than")]
        NoMoreThan = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"less-than")]
        LessThan = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"no-less-than")]
        NoLessThan = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-more-than")]
        VerMoreThan = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-no-more-than")]
        VerNoMoreThan = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-less-than")]
        VerLessThan = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-no-less-than")]
        VerNoLessThan = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VcsRootLocatorProperty
    {

        [System.Runtime.Serialization.EnumMember(Value = @"exists")]
        Exists = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"not-exists")]
        NotExists = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"equals")]
        Equals = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-equal")]
        DoesNotEqual = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"starts-with")]
        StartsWith = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"contains")]
        Contains = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-contain")]
        DoesNotContain = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ends-with")]
        EndsWith = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"matches")]
        Matches = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"does-not-match")]
        DoesNotMatch = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"more-than")]
        MoreThan = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"no-more-than")]
        NoMoreThan = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"less-than")]
        LessThan = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"no-less-than")]
        NoLessThan = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-more-than")]
        VerMoreThan = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-no-more-than")]
        VerNoMoreThan = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-less-than")]
        VerLessThan = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ver-no-less-than")]
        VerNoLessThan = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgentProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unidirectional")]
        Unidirectional = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"bidirectional")]
        Bidirectional = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApprovalInfoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"waitingForApproval")]
        WaitingForApproval = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"timedOut")]
        TimedOut = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BuildState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"queued")]
        Queued = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"finished")]
        Finished = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"running")]
        Running = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BuildTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"regular")]
        Regular = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"composite")]
        Composite = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deployment")]
        Deployment = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeploymentInstanceCurrentState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESSFUL")]
        SUCCESSFUL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum deploymentStateEntryState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESSFUL")]
        SUCCESSFUL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HealthItemSeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARN")]
        WARN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvestigationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TAKEN")]
        TAKEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GIVEN_UP")]
        GIVEN_UP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicenseKeyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"evaluation")]
        Evaluation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"eap")]
        Eap = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"open_source")]
        Open_source = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"commercial")]
        Commercial = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"enterprise")]
        Enterprise = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"professional")]
        Professional = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicensingDataServerLicenseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"evaluation")]
        Evaluation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"eap")]
        Eap = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"open_source")]
        Open_source = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"commercial")]
        Commercial = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"enterprise")]
        Enterprise = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"professional")]
        Professional = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"online")]
        Online = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"offline")]
        Offline = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stopping")]
        Stopping = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"starting")]
        Starting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestOccurrenceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NORMAL")]
        NORMAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILURE")]
        FAILURE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VcsLabelStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESSFUL_SET")]
        SUCCESSFUL_SET = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IS_BEING_SET")]
        IS_BEING_SET = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED_FOR_THE_ROOT")]
        DISABLED_FOR_THE_ROOT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LABELING_NOT_SUPPORTED")]
        LABELING_NOT_SUPPORTED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VersionedSettingsConfigBuildSettingsMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"alwaysUseCurrent")]
        AlwaysUseCurrent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"useCurrentByDefault")]
        UseCurrentByDefault = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"useFromVCS")]
        UseFromVCS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VersionedSettingsConfigSynchronizationMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"useParentProjectSettings")]
        UseParentProjectSettings = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VersionedSettingsConfigImportDecision
    {

        [System.Runtime.Serialization.EnumMember(Value = @"overrideInVCS")]
        OverrideInVCS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"importFromVCS")]
        ImportFromVCS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VersionedSettingsStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"info")]
        Info = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625